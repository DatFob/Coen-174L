%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: Trajan1_OL_K.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Santa Clara University
%%CreationDate: 9/15/08
%%BoundingBox: 0 0 607 26
%%HiResBoundingBox: 0 0 606.1504 25.9107
%%CropBox: 0 0 606.1504 25.9107
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.2 x434 R agm 4.4379 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Trajan1_K</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2008-09-15T17:04:05-07:00</xap:CreateDate>
         <xap:ModifyDate>2008-09-15T17:04:05-07:00</xap:ModifyDate>
         <xap:MetadataDate>2008-09-15T17:04:05-07:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>12</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgADAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8AnP5aQW2ief08u+a9IWLz&#xA;cHvbrRPNUXxfpa1lLPIJZdyzIj1AY/CBTb9pVV/5yC8zamk1lpOi3EkN9oqL5in9KGWbnJbyhbW3&#xA;cxK3ASUmc86D4Bir0aTzDa67+XU2vaexEF/pcl1AQd15wFuJP8yHY++KvIvLXmjW/Lvlm08nefH+&#xA;taD5h0xW8seY5ByRWmtw62dyW6PGx/dsT4dvslXpXk/ynouq/lZ5V0vVrVbi1TT7C5mtyWCPOIVk&#xA;Z34kcqysXNep3wKw38sfJnlm886+d1msIz+hdct30oioNv6IWZFjodl5oKjvhVFf85C63qD6faeW&#xA;tIuZrfUWSTWZZLeKaZwLD47WIiJX4+tdBeLNsOBrgV6J5H80W3mryjpXmG3oE1G3WV0Xoko+GWPf&#xA;+SRWX6MVYz+fPmXV/Lv5aahfaTM1pdySQWpvk+1bxzyhHlWm4IU0BHQnbFUYv5Q/l3Jp9qlvpcAu&#xA;YGhnh1lVV76R4mVw8l0QZJPUp8XJiCDiqQ/nXZ2k2vfl6ZYUkM3mC3t5uQB5wsrM0b1+0hKj4Tti&#xA;r0vU9RtNM0661G8f0rSzhe4uJD+zHEpdj9AGKvFPyV856k3nvV9N1iaUt5rhXzBYxTRTRCGf7E9o&#xA;vqqvIxwiPddqL1xVH/nMukQfmZ5An1DTpNRs5otaGoWlvD60s8cNmjRj01oX9JmLr/L1GKsn/IuS&#xA;5m/LTS55r/6/FO08tm5cyvFbtMxigkkJZmeJfhap2Pw9sVYDp35h3C/nXb61JcSHy9r883lu3iaK&#xA;VYYxalfqcyysqxubi59bjxbZTvhV75gV5V5itbT/AKGH8qs0SVl0q8kNQPjliJCMf5mReh7YVTLR&#xA;LK0T87/Mkqwosg0jT5AwUAh5ZZxI3zYRrU96YFYnr2p+dvLv5n+afNejq+p+XrBrGLzDoMe8pgaz&#xA;RvrVuDtzi/aHdfbdVWTflde+XNY82+b9f0IxTWV+2nvb3EYpVXtQ0gp+yfVr6g/mrXfFUL5PtbZf&#xA;z689lYkUx2emvHQAcWniLSsvgZCKse/fFUov7zTfyv8Aza1HUJ41g8t+aNKluoFUACO+05TJJDED&#xA;svqoeXEfadgKbYqy7yl5Ni0n8u7qHVLWI6pq0M9/rSFBx+sXHKYw06cIOfpoBsKbYVYb/wA47adA&#xA;+haBqUnl2WG6fT7uvmQyxsk5+tIvptGrs/Ir9kuo2U064FS381ZNAsPzb1WbU9NmvbI+THunSzjL&#xA;SJdC+ZEu6rQxsiqF9XqB7Yq9U8k2+qP+WOkwXGqrdajJpaKdXjbmvN4vhkD7F+FR8R3NK4qwP8lV&#xA;sNL8xz+Wtd0NNH8/aZYsk+oRbpq1k0yH64ZDvJJ6iipYk9fdVVTXTbW2H/OR+qt6S1Ty9DOuw2le&#xA;54NIP8sp8JbrTbFUr/Pvyl5es9AXWYLNV1XUNZsBd3hLGR1dxGyVJ2UooXiNsKs+uPyy8myaFqmi&#xA;Q2C21jqp5zJESOEojEayxfyOoUEEd8CvN/y+sdZ8z6nb+UPNEUctp+WsphupNiL+cho9PYqd/TS3&#xA;BZw32241GKp/5B/QX6X0D61+nPrP6On/AMKfp76jT6rSL1fR+qfH6npen/f/ALzhX/KxVOvJ36E/&#xA;xL5v/wB7/wBJ+rb/AKa/Sn1bhw9JvQ9H0f8AdPpVpXbr35YqkP5df4W/5VVqf+H/ANNf4U4XP1b6&#xA;19U9X0uT/WfqfLbhy5f3nevHfCqOvv8AlXv/ACpS2/xJ63+D/wBHw/Vv0j6X1v0PTH1Xj6P+7uHH&#xA;hT4v5t64FZl5R+o/4U0X9H+r9Q+oW31T6xx9b0fRX0/U4fDz405U2rirDfyw/wAO/wCKvOH6J/Sv&#xA;1368f09+kfqvo/W6nj6XpfH9j7NPh4+9MVTPyx+iv+Vh+Zv+Oj+nPQtPrf1/6t6H1Wsv1b6n6Xx+&#xA;nXnX/K+18eKoD8mf8MfozVP8KfpH9BfpC54/Xfq/1f6xzHrfVPT/AHnpV6V+Hw3rirLfN/8Ahr/D&#xA;Opf4n9L9Aeg36R9evD0u9ePxV/l4716b4q8q8vfUP0JZfVf8Z/4H9aD6v9b/AEb9U9D1F9KvP/cn&#xA;9V6e3D/JxVkP5yf4f+seWv0v+mPrP19f0H+hvqvP9IcT6dfrH7VK8a/B44qlutfoz/lXeqf4g/xR&#xA;9S+v/wC5z6z9Q+u/Zi4+p6X+j/VePD+6+GleW1cKpx+ZP+GP8T+S/r/6S/xL9YuP8P8A6M+r+ty9&#xA;NPrHq+t8Hp8Kcu2BXedP0B/ys3yX9e/Sn6epef4f+qfVPqv90Prvq+p8X9zTl7fZ3xVJtD/wr9e8&#xA;3/4L/T/6P9SX9Kfon6p9Q+t0HrfUPrG/rUrX0vo/Ywqu8yf8q3/5UloP1z6//hqmn/ob6p6P6R9S&#xA;o+r8eH7v1evPv1r8WBXqem+t9Qt/X9b1eA5/WfS9av8AxZ6H7rl48dsVYD+a/wDhf9L+W/rH6V/x&#xA;b60/+Hv0B6X1/jwH1mv1j9x6PCnP1NvxxVNfIH6C+u6x6P1//Elbf9Pfpbj9cpxb6tX0v9G9OnPh&#xA;6HwdcVb8r/o7/Hfmv6t+kfr3O2/Sn1n6t9U5ekPq/oen+9/ufH/ZfFiqC/LL/lXf6Z82f4Lrw+ux&#xA;/pT0uP1P6z6Z5fVqfs9eX7Nfs7Yqh/Lf+H/+Vv8Amb6p+lP0/wCjb/pn1/qn1H0eH+i+nw/e/Z+z&#xA;Tf8AnxVG/ml/gL/nWf8AF3L/AI7Nt+ieFP8Aevfh6lf90/z/AEYqyvXqfoW+5etw9CTn9W9P1uPE&#xA;8vT9X93yp05Yq8t/KD9DcNE/QX+J/wDDHpXH6E/SP1D9HV+L1K/V/wDSeVefH1tuvHtiqcXv+F/+&#xA;V0v6/wCkf8QfoP8Af8vqn6N/Q/rfHz9T95x+sfa/ar/k4qgPI/8Agz/CHmT/AA/+mf8ABPo3vp+p&#xA;6f1XhR/W/RnP/SKfa48vgr74qm/kj9Hf4ol/SP6X/wAT/o2H6t+nvqPr/o/1Gr6P1D93/e09Xn8d&#xA;eNcVUrT/AA//AMrtvfR/Sn+Jf0Yn1qv1T6h9Q5jhT/dv974fFX/JxVU/Ov8Aw3/huy/xH+kf0d9f&#xA;g9P9F/V+f1rl+45+v25eG3jirPbX1Pq0Xqc/U4Lz9Xh6nKm/P0/g5ePHbwxV57+Xv+H/APHvnL9G&#xA;fpX9KevD/iD699U+retxPoel6X7z+7rSm1Ptb4q//9k=</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:950BD94584D911DDA992F400C35A6B9B</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:950BD94684D911DDA992F400C35A6B9B</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:950BD94284D911DDA992F400C35A6B9B</stRef:instanceID>
            <stRef:documentID>uuid:950BD94184D911DDA992F400C35A6B9B</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Basic CMYK</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>11.000000</stDim:w>
            <stDim:h>8.500000</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>White</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Black</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>100.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>CMYK Red</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>CMYK Yellow</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>CMYK Green</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>CMYK Cyan</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>CMYK Blue</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>CMYK Magenta</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=15 M=100 Y=90 K=10</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>14.999998</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>90.000000</xapG:yellow>
                           <xapG:black>10.000002</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=90 Y=85 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>90.000000</xapG:magenta>
                           <xapG:yellow>85.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=80 Y=95 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>80.000000</xapG:magenta>
                           <xapG:yellow>95.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=50 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=35 Y=85 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>35.000004</xapG:magenta>
                           <xapG:yellow>85.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=5 M=0 Y=90 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>5.000001</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>90.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=20 M=0 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>19.999998</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=0 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=75 M=0 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>75.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=85 M=10 Y=100 K=10</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>85.000000</xapG:cyan>
                           <xapG:magenta>10.000002</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>10.000002</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=90 M=30 Y=95 K=30</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>90.000000</xapG:cyan>
                           <xapG:magenta>30.000002</xapG:magenta>
                           <xapG:yellow>95.000000</xapG:yellow>
                           <xapG:black>30.000002</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=75 M=0 Y=75 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>75.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>75.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=80 M=10 Y=45 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>80.000000</xapG:cyan>
                           <xapG:magenta>10.000002</xapG:magenta>
                           <xapG:yellow>45.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=70 M=15 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>70.000000</xapG:cyan>
                           <xapG:magenta>14.999998</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=85 M=50 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>85.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=100 M=95 Y=5 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>95.000000</xapG:magenta>
                           <xapG:yellow>5.000001</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=100 M=100 Y=25 K=25</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>25.000000</xapG:yellow>
                           <xapG:black>25.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=75 M=100 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>75.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=100 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=35 M=100 Y=35 K=10</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>35.000004</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>35.000004</xapG:yellow>
                           <xapG:black>10.000002</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=10 M=100 Y=50 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>10.000002</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>50.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=95 Y=20 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>95.000000</xapG:magenta>
                           <xapG:yellow>19.999998</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=25 M=25 Y=40 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>25.000000</xapG:cyan>
                           <xapG:magenta>25.000000</xapG:magenta>
                           <xapG:yellow>39.999996</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=40 M=45 Y=50 K=5</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>39.999996</xapG:cyan>
                           <xapG:magenta>45.000000</xapG:magenta>
                           <xapG:yellow>50.000000</xapG:yellow>
                           <xapG:black>5.000001</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=50 Y=60 K=25</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>60.000004</xapG:yellow>
                           <xapG:black>25.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=55 M=60 Y=65 K=40</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>55.000000</xapG:cyan>
                           <xapG:magenta>60.000004</xapG:magenta>
                           <xapG:yellow>65.000000</xapG:yellow>
                           <xapG:black>39.999996</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=25 M=40 Y=65 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>25.000000</xapG:cyan>
                           <xapG:magenta>39.999996</xapG:magenta>
                           <xapG:yellow>65.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=30 M=50 Y=75 K=10</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>30.000002</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>75.000000</xapG:yellow>
                           <xapG:black>10.000002</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=35 M=60 Y=80 K=25</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>35.000004</xapG:cyan>
                           <xapG:magenta>60.000004</xapG:magenta>
                           <xapG:yellow>80.000000</xapG:yellow>
                           <xapG:black>25.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=40 M=65 Y=90 K=35</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>39.999996</xapG:cyan>
                           <xapG:magenta>65.000000</xapG:magenta>
                           <xapG:yellow>90.000000</xapG:yellow>
                           <xapG:black>35.000004</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=40 M=70 Y=100 K=50</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>39.999996</xapG:cyan>
                           <xapG:magenta>70.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>50.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=70 Y=80 K=70</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>70.000000</xapG:magenta>
                           <xapG:yellow>80.000000</xapG:yellow>
                           <xapG:black>70.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>PANTONE 201 C</xapG:swatchName>
                           <xapG:type>SPOT</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>63.000500</xapG:yellow>
                           <xapG:black>28.999298</xapG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Grayscale</xapG:groupName>
                  <xapG:groupType>1</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=90</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>229</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=80</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>203</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=70</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>178</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=60</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>152</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=50</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>127</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=40</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>101</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=30</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>76</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=20</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>50</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=10</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>25</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=5</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>12</xapG:gray>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -25.9106 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 25.9106 li
606.15 25.9106 li
606.15 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0.621582 25.0591 mo
0.0981445 24.8306 0 24.6665 0 23.9478 cv
0 22.1479 0.130859 20.1851 0.163574 19.6616 cv
0.196289 19.1709 0.294434 18.811 0.556152 18.811 cv
0.850586 18.811 0.883301 19.1055 0.883301 19.3672 cv
0.883301 19.7925 1.01416 20.4795 1.17773 21.0356 cv
1.89746 23.4565 3.82764 24.3403 5.85596 24.3403 cv
8.80029 24.3403 10.2397 22.3442 10.2397 20.6104 cv
10.2397 19.0073 9.74902 17.4697 7.03369 15.376 cv
5.52881 14.1982 li
1.93018 11.3848 0.687012 9.09473 0.687012 6.44482 cv
0.687012 2.84619 3.69678 0.261719 8.24414 0.261719 cv
10.3706 0.261719 11.7446 0.588867 12.5952 0.817871 cv
12.8896 0.883301 13.0532 0.981445 13.0532 1.21045 cv
13.0532 1.63574 12.9224 2.58447 12.9224 5.13623 cv
12.9224 5.85596 12.8242 6.11768 12.5625 6.11768 cv
12.3335 6.11768 12.2354 5.92139 12.2354 5.52881 cv
12.2354 5.23438 12.0718 4.22021 11.3848 3.36963 cv
10.894 2.74805 9.94531 1.7666 7.81885 1.7666 cv
5.39795 1.7666 3.92578 3.17334 3.92578 5.13623 cv
3.92578 6.64111 4.67822 7.78613 7.39355 9.84717 cv
8.30957 10.5342 li
12.2354 13.5767 13.6748 15.7686 13.6748 18.8765 cv
13.6748 20.7739 12.9551 23.0317 10.5996 24.5688 cv
8.96387 25.6157 7.13184 25.9106 5.39795 25.9106 cv
3.50049 25.9106 2.02832 25.6812 0.621582 25.0591 cv
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
f
35.6567 15.2778 mo
35.8203 15.2778 35.853 15.1797 35.8203 15.0815 cv
32.876 7.00098 li
32.8433 6.87012 32.8105 6.70654 32.7124 6.70654 cv
32.6143 6.70654 32.5488 6.87012 32.5161 7.00098 cv
29.5063 15.0488 li
29.4736 15.1797 29.5063 15.2778 29.6372 15.2778 cv
35.6567 15.2778 li
cp
28.9829 16.9136 mo
28.8193 16.9136 28.7539 16.979 28.6885 17.1753 cv
26.9219 21.854 li
26.5947 22.6714 26.4312 23.4565 26.4312 23.8491 cv
26.4312 24.438 26.7256 24.8638 27.7397 24.8638 cv
28.2305 24.8638 li
28.623 24.8638 28.7212 24.9282 28.7212 25.1255 cv
28.7212 25.3872 28.5249 25.4517 28.165 25.4517 cv
27.1182 25.4517 25.7114 25.354 24.6973 25.354 cv
24.3374 25.354 22.5381 25.4517 20.8369 25.4517 cv
20.4116 25.4517 20.2153 25.3872 20.2153 25.1255 cv
20.2153 24.9282 20.3462 24.8638 20.6079 24.8638 cv
20.9023 24.8638 21.3604 24.8306 21.6221 24.7974 cv
23.127 24.6021 23.7485 23.4888 24.4028 21.854 cv
32.6143 1.30859 li
33.0068 0.359863 33.2031 0 33.5303 0 cv
33.8247 0 34.021 0.294434 34.3481 1.04688 cv
35.1333 2.84619 40.3677 16.1938 42.4614 21.1665 cv
43.7046 24.1108 44.6533 24.5688 45.3403 24.7329 cv
45.8311 24.8306 46.3218 24.8638 46.7144 24.8638 cv
46.9761 24.8638 47.1396 24.896 47.1396 25.1255 cv
47.1396 25.3872 46.8452 25.4517 45.6348 25.4517 cv
44.457 25.4517 42.0688 25.4517 39.4517 25.3872 cv
38.8628 25.354 38.4702 25.354 38.4702 25.1255 cv
38.4702 24.9282 38.6011 24.8638 38.9282 24.8306 cv
39.1572 24.7651 39.3862 24.4712 39.2227 24.0786 cv
36.6055 17.1426 li
36.54 16.979 36.4419 16.9136 36.2783 16.9136 cv
28.9829 16.9136 li
cp
f
58.6201 21.0029 mo
58.6855 23.5552 59.1108 24.4048 59.7651 24.6343 cv
60.3213 24.8306 60.9429 24.8638 61.4663 24.8638 cv
61.8262 24.8638 62.0225 24.9282 62.0225 25.1255 cv
62.0225 25.3872 61.728 25.4517 61.27 25.4517 cv
59.1436 25.4517 57.835 25.354 57.2134 25.354 cv
56.9189 25.354 55.3813 25.4517 53.6802 25.4517 cv
53.2549 25.4517 52.9604 25.4194 52.9604 25.1255 cv
52.9604 24.9282 53.1567 24.8638 53.4839 24.8638 cv
53.9092 24.8638 54.498 24.8306 54.9561 24.6997 cv
55.8066 24.438 55.9375 23.4888 55.9702 20.6431 cv
56.2646 1.27588 li
56.2646 0.621582 56.3628 0.163574 56.6899 0.163574 cv
57.0498 0.163574 57.3442 0.588867 57.9004 1.17773 cv
58.293 1.60303 63.2656 6.93555 68.042 11.6792 cv
70.2666 13.9038 74.6831 18.6147 75.2393 19.1382 cv
75.4028 19.1382 li
75.0757 4.44922 li
75.043 2.45361 74.7485 1.83203 73.9634 1.50488 cv
73.4727 1.30859 72.6875 1.30859 72.2295 1.30859 cv
71.8369 1.30859 71.7061 1.21045 71.7061 1.01416 cv
71.7061 0.752441 72.0659 0.719727 72.5566 0.719727 cv
74.2578 0.719727 75.8281 0.817871 76.5151 0.817871 cv
76.875 0.817871 78.1182 0.719727 79.7212 0.719727 cv
80.1465 0.719727 80.4736 0.752441 80.4736 1.01416 cv
80.4736 1.21045 80.2773 1.30859 79.8848 1.30859 cv
79.5576 1.30859 79.2959 1.30859 78.9033 1.40674 cv
77.9873 1.66846 77.7256 2.35547 77.6929 4.1875 cv
77.333 24.8306 li
77.333 25.5503 77.2021 25.8442 76.9077 25.8442 cv
76.5479 25.8442 76.1553 25.4849 75.7954 25.1255 cv
73.7344 23.1626 69.5469 18.8765 66.1445 15.5068 cv
62.5786 11.9736 58.9473 7.88428 58.3584 7.2627 cv
58.2603 7.2627 li
58.6201 21.0029 li
cp
f
98.3325 2.55176 mo
93.458 2.68262 li
91.5605 2.74805 90.7754 2.91162 90.2847 3.63135 cv
89.9575 4.12207 89.7939 4.51465 89.7285 4.77637 cv
89.6631 5.03809 89.5649 5.16895 89.3687 5.16895 cv
89.1396 5.16895 89.0742 5.00537 89.0742 4.64551 cv
89.0742 4.12207 89.6958 1.14502 89.7612 0.883301 cv
89.8594 0.458008 89.9575 0.261719 90.1538 0.261719 cv
90.4155 0.261719 90.7427 0.588867 91.5605 0.654297 cv
92.5093 0.752441 93.7524 0.817871 94.832 0.817871 cv
107.787 0.817871 li
108.834 0.817871 109.554 0.719727 110.044 0.654297 cv
110.535 0.556152 110.797 0.490723 110.928 0.490723 cv
111.157 0.490723 111.189 0.687012 111.189 1.17773 cv
111.189 1.86475 111.091 4.12207 111.091 4.97266 cv
111.059 5.2998 110.993 5.49609 110.797 5.49609 cv
110.535 5.49609 110.47 5.33252 110.437 4.8418 cv
110.404 4.48193 li
110.339 3.63135 109.456 2.71533 106.544 2.6499 cv
102.422 2.55176 li
102.422 15.9648 li
102.422 18.9746 102.422 21.5591 102.585 22.9653 cv
102.684 23.8813 102.88 24.6021 103.861 24.7329 cv
104.319 24.7974 105.039 24.8638 105.53 24.8638 cv
105.89 24.8638 106.053 24.9614 106.053 25.1255 cv
106.053 25.354 105.792 25.4517 105.432 25.4517 cv
103.272 25.4517 101.211 25.354 100.295 25.354 cv
99.543 25.354 97.4819 25.4517 96.1733 25.4517 cv
95.748 25.4517 95.519 25.354 95.519 25.1255 cv
95.519 24.9614 95.6499 24.8638 96.0425 24.8638 cv
96.5332 24.8638 96.9258 24.7974 97.2202 24.7329 cv
97.8745 24.6021 98.0708 23.8813 98.1689 22.9331 cv
98.3325 21.5591 98.3325 18.9746 98.3325 15.9648 cv
98.3325 2.55176 li
cp
f
131.404 15.2778 mo
131.567 15.2778 131.6 15.1797 131.567 15.0815 cv
128.623 7.00098 li
128.59 6.87012 128.558 6.70654 128.459 6.70654 cv
128.361 6.70654 128.296 6.87012 128.263 7.00098 cv
125.253 15.0488 li
125.221 15.1797 125.253 15.2778 125.384 15.2778 cv
131.404 15.2778 li
cp
124.73 16.9136 mo
124.566 16.9136 124.501 16.979 124.436 17.1753 cv
122.669 21.854 li
122.342 22.6714 122.178 23.4565 122.178 23.8491 cv
122.178 24.438 122.473 24.8638 123.487 24.8638 cv
123.978 24.8638 li
124.37 24.8638 124.468 24.9282 124.468 25.1255 cv
124.468 25.3872 124.272 25.4517 123.912 25.4517 cv
122.865 25.4517 121.458 25.354 120.444 25.354 cv
120.084 25.354 118.285 25.4517 116.584 25.4517 cv
116.159 25.4517 115.962 25.3872 115.962 25.1255 cv
115.962 24.9282 116.093 24.8638 116.355 24.8638 cv
116.649 24.8638 117.107 24.8306 117.369 24.7974 cv
118.874 24.6021 119.496 23.4888 120.15 21.854 cv
128.361 1.30859 li
128.754 0.359863 128.95 0 129.277 0 cv
129.572 0 129.768 0.294434 130.095 1.04688 cv
130.88 2.84619 136.115 16.1938 138.208 21.1665 cv
139.452 24.1108 140.4 24.5688 141.087 24.7329 cv
141.578 24.8306 142.069 24.8638 142.461 24.8638 cv
142.723 24.8638 142.887 24.896 142.887 25.1255 cv
142.887 25.3872 142.592 25.4517 141.382 25.4517 cv
140.204 25.4517 137.816 25.4517 135.199 25.3872 cv
134.61 25.354 134.217 25.354 134.217 25.1255 cv
134.217 24.9282 134.348 24.8638 134.675 24.8306 cv
134.904 24.7651 135.133 24.4712 134.97 24.0786 cv
132.353 17.1426 li
132.287 16.979 132.189 16.9136 132.025 16.9136 cv
124.73 16.9136 li
cp
f
169.054 22.3442 mo
165.848 19.5308 164.998 15.8667 164.998 12.6934 cv
164.998 10.4688 165.685 6.6084 168.825 3.72949 cv
171.181 1.57031 174.289 0.261719 179.163 0.261719 cv
181.191 0.261719 182.402 0.392578 183.907 0.588867 cv
185.15 0.752441 186.197 1.04688 187.178 1.14502 cv
187.538 1.17773 187.669 1.34131 187.669 1.5376 cv
187.669 1.79932 187.571 2.19189 187.505 3.33691 cv
187.44 4.4165 187.473 6.21582 187.407 6.87012 cv
187.375 7.36084 187.309 7.62256 187.015 7.62256 cv
186.753 7.62256 186.688 7.36084 186.688 6.90283 cv
186.655 5.88867 186.229 4.74365 185.412 3.89307 cv
184.332 2.74805 181.78 1.86475 178.771 1.86475 cv
175.924 1.86475 174.06 2.58447 172.62 3.89307 cv
170.232 6.08496 169.61 9.19287 169.61 12.3662 cv
169.61 20.1523 175.532 24.0122 179.916 24.0122 cv
182.827 24.0122 184.594 23.686 185.902 22.1802 cv
186.458 21.5591 186.884 20.6104 187.015 20.0215 cv
187.113 19.498 187.178 19.3672 187.44 19.3672 cv
187.669 19.3672 187.734 19.5962 187.734 19.8579 cv
187.734 20.2505 187.342 23.0962 187.015 24.2095 cv
186.851 24.7651 186.72 24.9282 186.164 25.1577 cv
184.855 25.6812 182.369 25.9106 180.275 25.9106 cv
175.793 25.9106 172.031 24.9282 169.054 22.3442 cv
cp
f
205.037 15.9648 mo
205.037 20.1523 205.037 22.4097 205.724 22.9985 cv
206.28 23.4888 207.131 23.7183 209.683 23.7183 cv
211.417 23.7183 212.692 23.686 213.51 22.8022 cv
213.903 22.3774 214.295 21.4609 214.361 20.8394 cv
214.394 20.5449 214.459 20.3486 214.721 20.3486 cv
214.95 20.3486 214.982 20.5122 214.982 20.9048 cv
214.982 21.2646 214.753 23.7183 214.492 24.6665 cv
214.295 25.3872 214.132 25.5503 212.431 25.5503 cv
207.72 25.5503 205.561 25.354 202.911 25.354 cv
202.158 25.354 200.097 25.4517 198.789 25.4517 cv
198.363 25.4517 198.134 25.354 198.134 25.1255 cv
198.134 24.9614 198.265 24.8638 198.658 24.8638 cv
199.148 24.8638 199.541 24.7974 199.835 24.7329 cv
200.49 24.6021 200.653 23.8813 200.784 22.9331 cv
200.948 21.5591 200.948 18.9746 200.948 15.9648 cv
200.948 10.207 li
200.948 5.23438 200.948 4.31836 200.882 3.27148 cv
200.817 2.15918 200.555 1.63574 199.476 1.40674 cv
199.214 1.34131 198.821 1.30859 198.396 1.30859 cv
198.036 1.30859 197.84 1.24316 197.84 1.01416 cv
197.84 0.785156 198.069 0.719727 198.56 0.719727 cv
200.097 0.719727 202.158 0.817871 203.042 0.817871 cv
203.827 0.817871 206.215 0.719727 207.491 0.719727 cv
207.949 0.719727 208.178 0.785156 208.178 1.01416 cv
208.178 1.24316 207.981 1.30859 207.589 1.30859 cv
207.229 1.30859 206.706 1.34131 206.313 1.40674 cv
205.43 1.57031 205.168 2.12646 205.103 3.27148 cv
205.037 4.31836 205.037 5.23438 205.037 10.207 cv
205.037 15.9648 li
cp
f
234.936 15.2778 mo
235.1 15.2778 235.132 15.1797 235.1 15.0815 cv
232.155 7.00098 li
232.123 6.87012 232.09 6.70654 231.992 6.70654 cv
231.894 6.70654 231.828 6.87012 231.795 7.00098 cv
228.786 15.0488 li
228.753 15.1797 228.786 15.2778 228.917 15.2778 cv
234.936 15.2778 li
cp
228.262 16.9136 mo
228.099 16.9136 228.033 16.979 227.968 17.1753 cv
226.201 21.854 li
225.874 22.6714 225.71 23.4565 225.71 23.8491 cv
225.71 24.438 226.005 24.8638 227.019 24.8638 cv
227.51 24.8638 li
227.902 24.8638 228 24.9282 228 25.1255 cv
228 25.3872 227.804 25.4517 227.444 25.4517 cv
226.397 25.4517 224.991 25.354 223.977 25.354 cv
223.617 25.354 221.817 25.4517 220.116 25.4517 cv
219.691 25.4517 219.495 25.3872 219.495 25.1255 cv
219.495 24.9282 219.625 24.8638 219.887 24.8638 cv
220.182 24.8638 220.64 24.8306 220.901 24.7974 cv
222.406 24.6021 223.028 23.4888 223.682 21.854 cv
231.894 1.30859 li
232.286 0.359863 232.482 0 232.81 0 cv
233.104 0 233.3 0.294434 233.627 1.04688 cv
234.413 2.84619 239.647 16.1938 241.741 21.1665 cv
242.984 24.1108 243.933 24.5688 244.62 24.7329 cv
245.11 24.8306 245.601 24.8638 245.994 24.8638 cv
246.255 24.8638 246.419 24.896 246.419 25.1255 cv
246.419 25.3872 246.125 25.4517 244.914 25.4517 cv
243.736 25.4517 241.348 25.4517 238.731 25.3872 cv
238.142 25.354 237.75 25.354 237.75 25.1255 cv
237.75 24.9282 237.88 24.8638 238.208 24.8306 cv
238.437 24.7651 238.666 24.4712 238.502 24.0786 cv
235.885 17.1426 li
235.819 16.979 235.721 16.9136 235.558 16.9136 cv
228.262 16.9136 li
cp
f
259.928 12.7915 mo
259.928 13.1514 259.993 13.2822 260.222 13.3804 cv
260.909 13.6094 261.891 13.7075 262.708 13.7075 cv
264.017 13.7075 264.442 13.5767 265.031 13.1514 cv
266.013 12.4316 266.961 10.9268 266.961 8.24414 cv
266.961 3.59863 263.886 2.25732 261.956 2.25732 cv
261.138 2.25732 260.549 2.29004 260.222 2.38818 cv
259.993 2.45361 259.928 2.58447 259.928 2.84619 cv
259.928 12.7915 li
cp
256.067 10.207 mo
256.067 5.23438 256.067 4.31836 256.002 3.27148 cv
255.937 2.15918 255.675 1.63574 254.595 1.40674 cv
254.333 1.34131 253.777 1.30859 253.319 1.30859 cv
252.959 1.30859 252.763 1.24316 252.763 1.01416 cv
252.763 0.785156 252.992 0.719727 253.483 0.719727 cv
255.217 0.719727 257.278 0.817871 257.965 0.817871 cv
259.077 0.817871 261.563 0.719727 262.578 0.719727 cv
264.639 0.719727 266.831 0.916016 268.597 2.12646 cv
269.513 2.74805 270.822 4.4165 270.822 6.6084 cv
270.822 9.0293 269.808 11.2539 266.503 13.9365 cv
269.415 17.6006 271.672 20.5122 273.603 22.5405 cv
275.435 24.438 276.776 24.6665 277.267 24.7651 cv
277.626 24.8306 277.921 24.8638 278.183 24.8638 cv
278.444 24.8638 278.575 24.9614 278.575 25.1255 cv
278.575 25.3872 278.346 25.4517 277.954 25.4517 cv
274.846 25.4517 li
273.014 25.4517 272.196 25.2886 271.345 24.8306 cv
269.938 24.0786 268.695 22.5405 266.863 20.0215 cv
265.555 18.2222 264.05 15.9976 263.625 15.5068 cv
263.461 15.3105 263.265 15.2778 263.036 15.2778 cv
260.189 15.2124 li
260.026 15.2124 259.928 15.2778 259.928 15.4741 cv
259.928 15.9321 li
259.928 18.9746 259.928 21.5591 260.091 22.9331 cv
260.189 23.8813 260.386 24.6021 261.367 24.7329 cv
261.858 24.7974 262.578 24.8638 262.97 24.8638 cv
263.232 24.8638 263.363 24.9614 263.363 25.1255 cv
263.363 25.354 263.134 25.4517 262.708 25.4517 cv
260.811 25.4517 258.39 25.354 257.899 25.354 cv
257.278 25.354 255.217 25.4517 253.908 25.4517 cv
253.483 25.4517 253.254 25.354 253.254 25.1255 cv
253.254 24.9614 253.385 24.8638 253.777 24.8638 cv
254.268 24.8638 254.661 24.7974 254.955 24.7329 cv
255.609 24.6021 255.773 23.8813 255.904 22.9331 cv
256.067 21.5591 256.067 18.9746 256.067 15.9648 cv
256.067 10.207 li
cp
f
294.962 15.2778 mo
295.126 15.2778 295.159 15.1797 295.126 15.0815 cv
292.182 7.00098 li
292.149 6.87012 292.116 6.70654 292.018 6.70654 cv
291.92 6.70654 291.854 6.87012 291.822 7.00098 cv
288.812 15.0488 li
288.779 15.1797 288.812 15.2778 288.943 15.2778 cv
294.962 15.2778 li
cp
288.289 16.9136 mo
288.125 16.9136 288.06 16.979 287.994 17.1753 cv
286.228 21.854 li
285.9 22.6714 285.737 23.4565 285.737 23.8491 cv
285.737 24.438 286.031 24.8638 287.045 24.8638 cv
287.536 24.8638 li
287.929 24.8638 288.027 24.9282 288.027 25.1255 cv
288.027 25.3872 287.831 25.4517 287.471 25.4517 cv
286.424 25.4517 285.017 25.354 284.003 25.354 cv
283.643 25.354 281.844 25.4517 280.143 25.4517 cv
279.717 25.4517 279.521 25.3872 279.521 25.1255 cv
279.521 24.9282 279.652 24.8638 279.914 24.8638 cv
280.208 24.8638 280.666 24.8306 280.928 24.7974 cv
282.433 24.6021 283.054 23.4888 283.708 21.854 cv
291.92 1.30859 li
292.313 0.359863 292.509 0 292.836 0 cv
293.13 0 293.327 0.294434 293.654 1.04688 cv
294.439 2.84619 299.673 16.1938 301.767 21.1665 cv
303.01 24.1108 303.959 24.5688 304.646 24.7329 cv
305.137 24.8306 305.627 24.8638 306.02 24.8638 cv
306.282 24.8638 306.445 24.896 306.445 25.1255 cv
306.445 25.3872 306.151 25.4517 304.94 25.4517 cv
303.763 25.4517 301.375 25.4517 298.757 25.3872 cv
298.168 25.354 297.776 25.354 297.776 25.1255 cv
297.776 24.9282 297.907 24.8638 298.234 24.8306 cv
298.463 24.7651 298.692 24.4712 298.528 24.0786 cv
295.911 17.1426 li
295.846 16.979 295.748 16.9136 295.584 16.9136 cv
288.289 16.9136 li
cp
f
330.715 10.207 mo
330.715 5.23438 330.715 4.31836 330.648 3.27148 cv
330.584 2.15918 330.322 1.63574 329.242 1.40674 cv
328.98 1.34131 328.424 1.30859 327.967 1.30859 cv
327.607 1.30859 327.41 1.24316 327.41 1.01416 cv
327.41 0.785156 327.639 0.719727 328.131 0.719727 cv
329.863 0.719727 331.926 0.817871 332.906 0.817871 cv
333.691 0.817871 335.752 0.719727 336.93 0.719727 cv
337.422 0.719727 337.65 0.785156 337.65 1.01416 cv
337.65 1.24316 337.453 1.30859 337.127 1.30859 cv
336.768 1.30859 336.57 1.34131 336.178 1.40674 cv
335.295 1.57031 335.033 2.12646 334.967 3.27148 cv
334.902 4.31836 334.902 5.23438 334.902 10.207 cv
334.902 14.7871 li
334.902 19.5308 335.852 21.5264 337.453 22.8345 cv
338.926 24.0454 340.432 24.1763 341.543 24.1763 cv
342.982 24.1763 344.75 23.7183 346.059 22.4097 cv
347.857 20.6104 347.955 17.666 347.955 14.2964 cv
347.955 10.207 li
347.955 5.23438 347.955 4.31836 347.891 3.27148 cv
347.824 2.15918 347.563 1.63574 346.482 1.40674 cv
346.221 1.34131 345.666 1.30859 345.305 1.30859 cv
344.945 1.30859 344.75 1.24316 344.75 1.01416 cv
344.75 0.785156 344.979 0.719727 345.436 0.719727 cv
347.105 0.719727 349.166 0.817871 349.199 0.817871 cv
349.592 0.817871 351.652 0.719727 352.928 0.719727 cv
353.387 0.719727 353.615 0.785156 353.615 1.01416 cv
353.615 1.24316 353.418 1.30859 353.025 1.30859 cv
352.666 1.30859 352.471 1.34131 352.078 1.40674 cv
351.193 1.57031 350.932 2.12646 350.867 3.27148 cv
350.801 4.31836 350.801 5.23438 350.801 10.207 cv
350.801 13.7075 li
350.801 17.3389 350.441 21.1992 347.693 23.5552 cv
345.371 25.5503 343.016 25.9106 340.889 25.9106 cv
339.154 25.9106 336.014 25.812 333.627 23.6528 cv
331.957 22.1479 330.715 19.7271 330.715 14.9834 cv
330.715 10.207 li
cp
f
368.039 21.0029 mo
368.105 23.5552 368.529 24.4048 369.184 24.6343 cv
369.74 24.8306 370.361 24.8638 370.885 24.8638 cv
371.246 24.8638 371.441 24.9282 371.441 25.1255 cv
371.441 25.3872 371.146 25.4517 370.689 25.4517 cv
368.563 25.4517 367.254 25.354 366.633 25.354 cv
366.338 25.354 364.801 25.4517 363.1 25.4517 cv
362.674 25.4517 362.379 25.4194 362.379 25.1255 cv
362.379 24.9282 362.576 24.8638 362.902 24.8638 cv
363.328 24.8638 363.918 24.8306 364.375 24.6997 cv
365.227 24.438 365.357 23.4888 365.389 20.6431 cv
365.684 1.27588 li
365.684 0.621582 365.781 0.163574 366.109 0.163574 cv
366.469 0.163574 366.764 0.588867 367.32 1.17773 cv
367.713 1.60303 372.686 6.93555 377.461 11.6792 cv
379.686 13.9038 384.102 18.6147 384.658 19.1382 cv
384.822 19.1382 li
384.494 4.44922 li
384.463 2.45361 384.168 1.83203 383.383 1.50488 cv
382.893 1.30859 382.107 1.30859 381.648 1.30859 cv
381.256 1.30859 381.125 1.21045 381.125 1.01416 cv
381.125 0.752441 381.484 0.719727 381.977 0.719727 cv
383.678 0.719727 385.248 0.817871 385.934 0.817871 cv
386.295 0.817871 387.537 0.719727 389.141 0.719727 cv
389.566 0.719727 389.893 0.752441 389.893 1.01416 cv
389.893 1.21045 389.697 1.30859 389.305 1.30859 cv
388.977 1.30859 388.715 1.30859 388.322 1.40674 cv
387.406 1.66846 387.145 2.35547 387.111 4.1875 cv
386.752 24.8306 li
386.752 25.5503 386.621 25.8442 386.326 25.8442 cv
385.967 25.8442 385.574 25.4849 385.215 25.1255 cv
383.154 23.1626 378.967 18.8765 375.564 15.5068 cv
371.998 11.9736 368.367 7.88428 367.777 7.2627 cv
367.68 7.2627 li
368.039 21.0029 li
cp
f
403.4 10.207 mo
403.4 5.23438 403.4 4.31836 403.336 3.27148 cv
403.27 2.15918 402.943 1.60303 402.223 1.43945 cv
401.863 1.34131 401.438 1.30859 401.045 1.30859 cv
400.719 1.30859 400.521 1.24316 400.521 0.981445 cv
400.521 0.785156 400.783 0.719727 401.307 0.719727 cv
402.551 0.719727 404.611 0.817871 405.561 0.817871 cv
406.377 0.817871 408.309 0.719727 409.551 0.719727 cv
409.977 0.719727 410.238 0.785156 410.238 0.981445 cv
410.238 1.24316 410.041 1.30859 409.715 1.30859 cv
409.387 1.30859 409.125 1.34131 408.732 1.40674 cv
407.85 1.57031 407.588 2.12646 407.523 3.27148 cv
407.457 4.31836 407.457 5.23438 407.457 10.207 cv
407.457 15.9648 li
407.457 19.1382 407.457 21.7227 407.588 23.1294 cv
407.686 24.0122 407.916 24.6021 408.896 24.7329 cv
409.355 24.7974 410.074 24.8638 410.564 24.8638 cv
410.926 24.8638 411.088 24.9614 411.088 25.1255 cv
411.088 25.354 410.826 25.4517 410.467 25.4517 cv
408.309 25.4517 406.246 25.354 405.363 25.354 cv
404.611 25.354 402.551 25.4517 401.242 25.4517 cv
400.816 25.4517 400.588 25.354 400.588 25.1255 cv
400.588 24.9614 400.719 24.8638 401.111 24.8638 cv
401.602 24.8638 401.994 24.7974 402.289 24.7329 cv
402.943 24.6021 403.139 24.0454 403.236 23.0962 cv
403.4 21.7227 403.4 19.1382 403.4 15.9648 cv
403.4 10.207 li
cp
f
421.393 3.92578 mo
420.639 2.12646 420.084 1.7666 418.906 1.43945 cv
418.414 1.30859 417.891 1.30859 417.629 1.30859 cv
417.336 1.30859 417.236 1.21045 417.236 1.01416 cv
417.236 0.752441 417.598 0.719727 418.088 0.719727 cv
419.822 0.719727 421.686 0.817871 422.832 0.817871 cv
423.648 0.817871 425.219 0.719727 426.855 0.719727 cv
427.248 0.719727 427.607 0.785156 427.607 1.01416 cv
427.607 1.24316 427.412 1.30859 427.117 1.30859 cv
426.594 1.30859 426.104 1.34131 425.842 1.5376 cv
425.611 1.70117 425.514 1.93018 425.514 2.22461 cv
425.514 2.6499 425.809 3.56592 426.266 4.74365 cv
431.893 19.5962 li
432.023 19.5962 li
433.432 15.9976 437.684 5.46338 438.469 3.3042 cv
438.633 2.87891 438.764 2.38818 438.764 2.09375 cv
438.764 1.83203 438.633 1.57031 438.338 1.47217 cv
437.945 1.34131 437.455 1.30859 437.029 1.30859 cv
436.734 1.30859 436.473 1.27588 436.473 1.04688 cv
436.473 0.785156 436.768 0.719727 437.389 0.719727 cv
439.025 0.719727 440.398 0.817871 440.824 0.817871 cv
441.381 0.817871 442.918 0.719727 443.9 0.719727 cv
444.324 0.719727 444.586 0.785156 444.586 1.01416 cv
444.586 1.24316 444.391 1.30859 444.063 1.30859 cv
443.736 1.30859 443.049 1.30859 442.461 1.70117 cv
442.035 1.99561 441.545 2.55176 440.66 4.64551 cv
439.385 7.7207 438.502 9.4873 436.734 13.5112 cv
434.641 18.2876 433.104 21.854 432.385 23.4888 cv
431.533 25.3872 431.338 25.9106 430.879 25.9106 cv
430.453 25.9106 430.258 25.4517 429.637 23.9146 cv
421.393 3.92578 li
cp
f
454.301 10.207 mo
454.301 5.23438 454.301 4.31836 454.234 3.27148 cv
454.17 2.15918 453.908 1.63574 452.828 1.40674 cv
452.566 1.34131 452.01 1.30859 451.553 1.30859 cv
451.191 1.30859 450.996 1.24316 450.996 1.01416 cv
450.996 0.785156 451.225 0.719727 451.715 0.719727 cv
453.449 0.719727 455.51 0.817871 456.426 0.817871 cv
457.473 0.817871 463.984 0.817871 464.605 0.785156 cv
465.227 0.719727 465.75 0.654297 466.012 0.588867 cv
466.176 0.556152 466.371 0.458008 466.535 0.458008 cv
466.699 0.458008 466.732 0.588867 466.732 0.752441 cv
466.732 0.981445 466.568 1.37402 466.471 2.87891 cv
466.438 3.20605 466.371 4.64551 466.307 5.03809 cv
466.273 5.20166 466.209 5.39795 465.979 5.39795 cv
465.75 5.39795 465.686 5.23438 465.686 4.93994 cv
465.686 4.71094 465.652 4.15479 465.488 3.76221 cv
465.26 3.17334 464.932 2.78076 463.297 2.58447 cv
462.74 2.51904 459.305 2.45361 458.65 2.45361 cv
458.488 2.45361 458.422 2.55176 458.422 2.78076 cv
458.422 11.0576 li
458.422 11.2866 458.455 11.4175 458.65 11.4175 cv
459.371 11.4175 463.133 11.4175 463.885 11.3521 cv
464.67 11.2866 465.162 11.1885 465.455 10.8613 cv
465.686 10.5996 465.816 10.436 465.979 10.436 cv
466.109 10.436 466.209 10.5015 466.209 10.6978 cv
466.209 10.894 466.045 11.4175 465.947 13.0859 cv
465.881 13.7402 465.816 15.0488 465.816 15.2778 cv
465.816 15.5396 465.816 15.8994 465.521 15.8994 cv
465.293 15.8994 465.227 15.7686 465.227 15.605 cv
465.193 15.2778 465.193 14.8525 465.096 14.4272 cv
464.932 13.7729 464.475 13.2822 463.264 13.1514 cv
462.643 13.0859 459.404 13.0532 458.619 13.0532 cv
458.455 13.0532 458.422 13.1841 458.422 13.3804 cv
458.422 15.9648 li
458.422 17.0771 458.389 20.0869 458.422 21.0356 cv
458.488 23.2935 459.012 23.7837 462.348 23.7837 cv
463.199 23.7837 464.572 23.7837 465.424 23.3911 cv
466.273 22.9985 466.666 22.311 466.895 20.9702 cv
466.961 20.6104 467.025 20.4795 467.256 20.4795 cv
467.518 20.4795 467.518 20.7412 467.518 21.0684 cv
467.518 21.8208 467.256 24.0454 467.092 24.6997 cv
466.863 25.5503 466.568 25.5503 465.324 25.5503 cv
460.385 25.5503 458.193 25.354 456.264 25.354 cv
455.51 25.354 453.449 25.4517 452.141 25.4517 cv
451.715 25.4517 451.486 25.354 451.486 25.1255 cv
451.486 24.9614 451.617 24.8638 452.01 24.8638 cv
452.5 24.8638 452.893 24.7974 453.188 24.7329 cv
453.842 24.6021 454.006 23.8813 454.137 22.9331 cv
454.301 21.5591 454.301 18.9746 454.301 15.9648 cv
454.301 10.207 li
cp
f
485.049 12.7915 mo
485.049 13.1514 485.115 13.2822 485.344 13.3804 cv
486.031 13.6094 487.012 13.7075 487.83 13.7075 cv
489.139 13.7075 489.564 13.5767 490.152 13.1514 cv
491.135 12.4316 492.082 10.9268 492.082 8.24414 cv
492.082 3.59863 489.008 2.25732 487.078 2.25732 cv
486.26 2.25732 485.67 2.29004 485.344 2.38818 cv
485.115 2.45361 485.049 2.58447 485.049 2.84619 cv
485.049 12.7915 li
cp
481.189 10.207 mo
481.189 5.23438 481.189 4.31836 481.123 3.27148 cv
481.059 2.15918 480.797 1.63574 479.717 1.40674 cv
479.455 1.34131 478.898 1.30859 478.441 1.30859 cv
478.08 1.30859 477.885 1.24316 477.885 1.01416 cv
477.885 0.785156 478.113 0.719727 478.604 0.719727 cv
480.338 0.719727 482.398 0.817871 483.086 0.817871 cv
484.199 0.817871 486.686 0.719727 487.699 0.719727 cv
489.76 0.719727 491.951 0.916016 493.719 2.12646 cv
494.635 2.74805 495.943 4.4165 495.943 6.6084 cv
495.943 9.0293 494.93 11.2539 491.625 13.9365 cv
494.537 17.6006 496.793 20.5122 498.725 22.5405 cv
500.557 24.438 501.896 24.6665 502.389 24.7651 cv
502.748 24.8306 503.043 24.8638 503.305 24.8638 cv
503.566 24.8638 503.697 24.9614 503.697 25.1255 cv
503.697 25.3872 503.467 25.4517 503.074 25.4517 cv
499.967 25.4517 li
498.135 25.4517 497.316 25.2886 496.467 24.8306 cv
495.061 24.0786 493.816 22.5405 491.984 20.0215 cv
490.676 18.2222 489.172 15.9976 488.746 15.5068 cv
488.582 15.3105 488.387 15.2778 488.156 15.2778 cv
485.311 15.2124 li
485.146 15.2124 485.049 15.2778 485.049 15.4741 cv
485.049 15.9321 li
485.049 18.9746 485.049 21.5591 485.213 22.9331 cv
485.311 23.8813 485.508 24.6021 486.488 24.7329 cv
486.979 24.7974 487.699 24.8638 488.092 24.8638 cv
488.354 24.8638 488.484 24.9614 488.484 25.1255 cv
488.484 25.354 488.256 25.4517 487.83 25.4517 cv
485.932 25.4517 483.512 25.354 483.021 25.354 cv
482.398 25.354 480.338 25.4517 479.029 25.4517 cv
478.604 25.4517 478.375 25.354 478.375 25.1255 cv
478.375 24.9614 478.506 24.8638 478.898 24.8638 cv
479.389 24.8638 479.781 24.7974 480.076 24.7329 cv
480.73 24.6021 480.895 23.8813 481.025 22.9331 cv
481.189 21.5591 481.189 18.9746 481.189 15.9648 cv
481.189 10.207 li
cp
f
510.303 25.0591 mo
509.779 24.8306 509.682 24.6665 509.682 23.9478 cv
509.682 22.1479 509.813 20.1851 509.844 19.6616 cv
509.877 19.1709 509.975 18.811 510.236 18.811 cv
510.531 18.811 510.564 19.1055 510.564 19.3672 cv
510.564 19.7925 510.695 20.4795 510.859 21.0356 cv
511.578 23.4565 513.508 24.3403 515.537 24.3403 cv
518.48 24.3403 519.92 22.3442 519.92 20.6104 cv
519.92 19.0073 519.43 17.4697 516.715 15.376 cv
515.209 14.1982 li
511.611 11.3848 510.367 9.09473 510.367 6.44482 cv
510.367 2.84619 513.377 0.261719 517.926 0.261719 cv
520.051 0.261719 521.426 0.588867 522.275 0.817871 cv
522.57 0.883301 522.734 0.981445 522.734 1.21045 cv
522.734 1.63574 522.604 2.58447 522.604 5.13623 cv
522.604 5.85596 522.506 6.11768 522.244 6.11768 cv
522.014 6.11768 521.916 5.92139 521.916 5.52881 cv
521.916 5.23438 521.752 4.22021 521.066 3.36963 cv
520.574 2.74805 519.627 1.7666 517.5 1.7666 cv
515.078 1.7666 513.607 3.17334 513.607 5.13623 cv
513.607 6.64111 514.359 7.78613 517.074 9.84717 cv
517.99 10.5342 li
521.916 13.5767 523.355 15.7686 523.355 18.8765 cv
523.355 20.7739 522.637 23.0317 520.281 24.5688 cv
518.645 25.6157 516.813 25.9106 515.078 25.9106 cv
513.182 25.9106 511.709 25.6812 510.303 25.0591 cv
cp
f
537.355 10.207 mo
537.355 5.23438 537.355 4.31836 537.289 3.27148 cv
537.225 2.15918 536.896 1.60303 536.178 1.43945 cv
535.816 1.34131 535.393 1.30859 535 1.30859 cv
534.672 1.30859 534.477 1.24316 534.477 0.981445 cv
534.477 0.785156 534.738 0.719727 535.262 0.719727 cv
536.504 0.719727 538.564 0.817871 539.514 0.817871 cv
540.332 0.817871 542.262 0.719727 543.506 0.719727 cv
543.93 0.719727 544.191 0.785156 544.191 0.981445 cv
544.191 1.24316 543.996 1.30859 543.668 1.30859 cv
543.342 1.30859 543.08 1.34131 542.688 1.40674 cv
541.805 1.57031 541.543 2.12646 541.477 3.27148 cv
541.412 4.31836 541.412 5.23438 541.412 10.207 cv
541.412 15.9648 li
541.412 19.1382 541.412 21.7227 541.543 23.1294 cv
541.641 24.0122 541.869 24.6021 542.852 24.7329 cv
543.309 24.7974 544.029 24.8638 544.52 24.8638 cv
544.879 24.8638 545.043 24.9614 545.043 25.1255 cv
545.043 25.354 544.781 25.4517 544.422 25.4517 cv
542.262 25.4517 540.201 25.354 539.318 25.354 cv
538.564 25.354 536.504 25.4517 535.195 25.4517 cv
534.77 25.4517 534.541 25.354 534.541 25.1255 cv
534.541 24.9614 534.672 24.8638 535.064 24.8638 cv
535.555 24.8638 535.947 24.7974 536.242 24.7329 cv
536.896 24.6021 537.094 24.0454 537.191 23.0962 cv
537.355 21.7227 537.355 19.1382 537.355 15.9648 cv
537.355 10.207 li
cp
f
562.707 2.55176 mo
557.834 2.68262 li
555.936 2.74805 555.15 2.91162 554.66 3.63135 cv
554.332 4.12207 554.17 4.51465 554.104 4.77637 cv
554.039 5.03809 553.939 5.16895 553.744 5.16895 cv
553.516 5.16895 553.449 5.00537 553.449 4.64551 cv
553.449 4.12207 554.07 1.14502 554.137 0.883301 cv
554.234 0.458008 554.332 0.261719 554.529 0.261719 cv
554.791 0.261719 555.117 0.588867 555.936 0.654297 cv
556.885 0.752441 558.127 0.817871 559.207 0.817871 cv
572.162 0.817871 li
573.209 0.817871 573.93 0.719727 574.42 0.654297 cv
574.91 0.556152 575.172 0.490723 575.303 0.490723 cv
575.531 0.490723 575.564 0.687012 575.564 1.17773 cv
575.564 1.86475 575.467 4.12207 575.467 4.97266 cv
575.434 5.2998 575.369 5.49609 575.172 5.49609 cv
574.91 5.49609 574.846 5.33252 574.813 4.8418 cv
574.779 4.48193 li
574.715 3.63135 573.83 2.71533 570.92 2.6499 cv
566.797 2.55176 li
566.797 15.9648 li
566.797 18.9746 566.797 21.5591 566.961 22.9653 cv
567.059 23.8813 567.256 24.6021 568.236 24.7329 cv
568.695 24.7974 569.414 24.8638 569.904 24.8638 cv
570.266 24.8638 570.428 24.9614 570.428 25.1255 cv
570.428 25.354 570.166 25.4517 569.807 25.4517 cv
567.648 25.4517 565.586 25.354 564.67 25.354 cv
563.918 25.354 561.857 25.4517 560.549 25.4517 cv
560.123 25.4517 559.895 25.354 559.895 25.1255 cv
559.895 24.9614 560.025 24.8638 560.418 24.8638 cv
560.908 24.8638 561.301 24.7974 561.596 24.7329 cv
562.25 24.6021 562.445 23.8813 562.545 22.9331 cv
562.707 21.5591 562.707 18.9746 562.707 15.9648 cv
562.707 2.55176 li
cp
f
591.461 16.979 mo
591.461 15.2124 591.135 14.4927 590.709 13.5439 cv
590.48 13.0205 586.096 5.82324 584.951 4.12207 cv
584.133 2.91162 583.314 2.09375 582.693 1.73389 cv
582.268 1.50488 581.713 1.30859 581.32 1.30859 cv
581.059 1.30859 580.828 1.24316 580.828 1.01416 cv
580.828 0.817871 581.059 0.719727 581.451 0.719727 cv
582.039 0.719727 584.492 0.817871 585.572 0.817871 cv
586.26 0.817871 587.602 0.719727 589.072 0.719727 cv
589.4 0.719727 589.564 0.817871 589.564 1.01416 cv
589.564 1.21045 589.334 1.24316 588.844 1.37402 cv
588.549 1.43945 588.387 1.70117 588.387 1.96289 cv
588.387 2.22461 588.549 2.61719 588.779 3.0752 cv
589.236 4.05664 593.816 11.9409 594.34 12.8569 cv
594.668 12.0718 598.789 4.87451 599.248 3.86035 cv
599.574 3.14063 599.705 2.58447 599.705 2.15918 cv
599.705 1.83203 599.574 1.47217 599.018 1.34131 cv
598.725 1.27588 598.43 1.21045 598.43 1.01416 cv
598.43 0.785156 598.594 0.719727 598.986 0.719727 cv
600.064 0.719727 601.111 0.817871 602.061 0.817871 cv
602.781 0.817871 604.939 0.719727 605.561 0.719727 cv
605.922 0.719727 606.15 0.785156 606.15 0.981445 cv
606.15 1.21045 605.889 1.30859 605.529 1.30859 cv
605.201 1.30859 604.58 1.43945 604.09 1.70117 cv
603.402 2.02832 603.043 2.4209 602.322 3.3042 cv
601.242 4.61279 596.662 12.3008 596.074 13.7075 cv
595.584 14.8853 595.584 15.8994 595.584 16.979 cv
595.584 19.6616 li
595.584 20.1851 595.584 21.5591 595.682 22.9331 cv
595.746 23.8813 596.041 24.6021 597.023 24.7329 cv
597.48 24.7974 598.201 24.8638 598.658 24.8638 cv
599.018 24.8638 599.182 24.9614 599.182 25.1255 cv
599.182 25.354 598.92 25.4517 598.494 25.4517 cv
596.434 25.4517 594.373 25.354 593.49 25.354 cv
592.672 25.354 590.611 25.4517 589.4 25.4517 cv
588.941 25.4517 588.68 25.3872 588.68 25.1255 cv
588.68 24.9614 588.844 24.8638 589.203 24.8638 cv
589.662 24.8638 590.055 24.7974 590.35 24.7329 cv
591.004 24.6021 591.297 23.8813 591.363 22.9331 cv
591.461 21.5591 591.461 20.1851 591.461 19.6616 cv
591.461 16.979 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.2%%For: (Santa Clara University) ()%%Title: (Trajan1_OL_K.eps)%%CreationDate: 9/15/08 5:04 PM%AI9_DataStream%Gb"+`#t#BJdbc.fIu">e#@[$&=']k*J]\>2\fM^0+B_#DF1CQ5oj:^C=3jPq7h;he?lj5$CO3"a]"=tTAYn+Qo\,kmf4t?CNNuSk%driFlBPr+?2bGSN:HG\3;7oK>1HaKtZ)(O,4^Ej*:;qE?)rIVSY%GM.p&<q22!BpCLAf"t1og5\rS_Fb>j\s0:J*.,:[S*mV].Ji%_pd2HlrQ#sl,J0pdcn2I:/2=OiC;KU/HhR?m-Qa,f%4<)b^Sa5VnL"9U`Je%cCk..'HW>)J\06Wh[RS8(c6?7_g#oLhES2<7cXIs%6\&+c@4mS>BpoLG(nU3nApJN3oB"i0Q]8;El/gV>nR?SQJ56$DIWul\m>T'&f!s2tICd<$[25>C\uftf(<\P9MJLs1/s]Z1I+qBr%M>(C<pcD6i@*^FFYF,*BUDk1`3*+#G/Fc3>`521CnBXT"7I.2,)tukCI)0teLO>pWLZ@49s'Y5!h`t]lqKgR!L2VC/0rtpjI\4CK%U>HHl)eDCNg[)@f'fG][LO\k!H`c8Y?jp#_mnRgB2ThU<*l1$X[seHI^'30*X$P+elb@#+?.4@@/.9Nn\%ITt)+Ic4\F>8`_&o-+%_/rgM[T7QgdB1\:3ld<6&/TKK_KP=^cG(9@^34fACG+Ot%U^T*^65!I[YC>r80$!Oa8]P2Wd'[+I/8nb*Yr3I%XMSB5cqF1+Wa@Y%]\%o=1j\OmrtP22LiK6u'[d*Sl1Vm_BC^9?"C@]/pgi$lpL!Wf2/FJp/A5Ri]`"Dh"<MChqiekFhGM%p]%QKn"Qc3*p_`cTkd<p)%ao]T_=lsW&FM%--i35hS1UrX*Df:Hmo<nM]i:#TC$nhuRptP541Cisfm2k7B%Em;\A9;)5lhA#3I.9^IQibL)fR?$\fO6H*?M4(c%ch8V&9_SZ@1O$Mtlgu7ViB1VR[CY2>f3rH6gc8'n+Q9ltM*EN;)=[DT#iB:pUq[Yco#Ku\^Y9WsL=@&km'MN-c=&Zar@o2qVto!1%_%GnOaKdO6U\?q8p'6^G8k?#70)sTC%^Jpk2B?pdD;YuFcf$YQ:C!i^bIbfs6,84:5&RZl]*`*(D=q)M14r5a."6\q6(Z%a&r0&S%p-&c%W9@GibE.Q]\_;s(hAWiV*K[]KLq4D,0lTZd^JdaTJWr+9eTU1El*jQsfk`M2c!%I-ghcg]YN[s9VVSVJB%(GY9s)fZ1`H$V%X\iqO2Z/<]E#VQiDHI@S@5RV2<c?P.om4;PYLYYuIbcO)h7?OolW2iC)g/iseXEm8X^8'YWjU*??h8#Mc)KARX(KqARU4ICc"a"W%YL]`(l=SSMH<%H><:-\c2602HYA0oYk%8,0^003lDJj@gS)1$Sl"o(Ceu#ulD!ILYht.k:h66WSIhO@McZafX[scFYIDaZbc"hV7%YO9rRWjh6gSlbJfcgbhtnk?FN4O%`S%CbcVgoA!NJedI[Y2e6=jdN@2lE98+SVC'eC/3=4FF;,M>fUi#a)XkoE-+T#fhK(efBo#4%[5Vs[p2&?(CtlC7dl)$ueuYb!Yj,96W`kmXDg@Xa3L4Mb@,2]dDJ<_3Cm]@OAld/Ndl4t'l'dWHS!IcWL8ff6cnlY1h5D2kA(0oV%cYs?6YRSc0%E$Q/:i#>*]rouZWkPJ0\u30OUYEAVS%><Z\lR6e,;n*]XfB3hBeX2Ed9p?#i7<"S<Z[O5o#cE(#W/5pK*.bP!JS60%JQ,,c@?AR.o&&r<>*m`4oVP*V7KT8%8>pEb:`G?qO^+#VO^sSfO_g/!O`Z_1OaN:AObAjQJW0,S^#!/X$j9jF1gO[7NKfF0NR[>N%$:c").^p7k,HW2uj,_2n^<,R[.3E7GJ#Xf&!Fu7B"8i1g"(#pa5<+TLO=Mm%)(+ARK5h1rBT,`UN)ppV?f7j#fVZYjVomY)PHb]!%n^rmQIN7lfM]YUiR,Z0%T+_#oO8N\=T5'Si!&=CPnha_`TJU$h$^em6VX]1`2M$d$0XHMcoJPPZ"1ZPVDKC?od!s[N0!)>R2uMg8%#5i08T3@_-$(09Ik4O7Y2h@60YY^>(Aec^,\D.(%[t*dq`IRtOO9:tPr*Ko!Zr(\Gn`_`N';gH3F)#TLc/49kWNnC]_m7)[_G]Z8%@80j;>]L'-!4TgX>>o)`>DJc%*JD,E*AuIZ>:%p:Rr,j^8-):kP7\(<8Y&]g:_9BJUa`)kUbSZ&UcG56Ud:eFUe/>>aHNeVhd&u:%%Ik\BLV*jV3p/^JefGed*Ve%crj75P?/Sd+ppLO1:^?Q,l5D@a!R,B]P<6SH*\dO>0L+u>*N%=C1_:$!L^+=+KMqqtiITe:"SkoI%[;!Fl!BWgf"!ig/P/[NZj+6FI";-=Z;MQ!$=rIYo",)mB_@"4%Lb0.Uf;;P"!GU(%F#7_C,b+mu%bcHWF$TGE+9OnpK/B[G"uOud%BHS]4&=A9o#4^r0)"g.]DW6[<[1Y/aK.W`#&f691Z5:(S.I=S>57ch\&(2>OK@,%:nL6*!(106p\4F2!]L]b-^du=5`(7m=a@OHE%bZ2YQF[jdg[WNK5Ca<jCDR0K<N>.C0N`;$\Ng,R2NmqBHm)UWiJbopVO*$GIO0jttDrG^:"!@u]-,Bc+#KR3O`n,@Q%h1u_S0sCK%O=u\OO>htWO?\goO@L.SPaH]o1KJ3D@cQgL1Nk\pdh(7n9NlD\nX2M=9)beGd0!o_6@$N1&n`JR8M/4]%[1RrTnoP$WTm/&ElK<S%@a%h]En$EA'kOTtM^^Gb8TG]R(pTE8/4L@IlXjkeOED3D#Yeh"'dYER=Hp*>B=Xg,=j*WnQa^5ZP0E#cQfP<2]Ho"SlVdLI`@hL)%+b-7"R*/m#^bH^36Cse]_Bal4&8!]-4sbgp-#b:[J4]ZZiEP?*=3+ZGb$7``>:s^%SGfRC94^$#:IG&!H\P3'-F$5kpe7=YTG2S&%O2HE_p4H:!9;]h0!9jK5fR=shZPDIH;N4OCPu5RK>=G>"U_9I:LX?H,$dsr91ALlk,TK979l@DEc)EEA68Ckonej/*3OrrbD+7J?%*sj.,%5/m$E:]2(=e2$SN7<sAHq#eB,<:OA&R-JLH3PTMN=hg)P+]h%PQG4SE+Y=h95!5-fjX!ab>a<Y/Mi+1/9.r:/7D'$^Hus1%A1'rEP+O!c9jt/E.E^^b8Vg7s9Y!.E!gS[CK.0P)[/uPmFf&EE6G!"eot!i:E[bdh(o8-Ef]m9GRnVm$QqFP:_-:KNIZl4/O,782%M.)1-"W%!oZjrm7ie6E7g0f5aR2-6DACS0Cc4#a`1I3pegr:H4T.>DYO]5f\S:3$b@n(p+W?6QN7gjf=d=7tj`+]=d_MW-Pco8I]%^0bk;c&jVfb%'im<[`30q@sJ7[Hmq8o_aLQRG(&RSG]'lQQ;h&>S;I-p)1N\&aD1obJdrn0-"lh;g]*O6>Uu/<.I]EZ5Fa%AfH:g%51V5,#HY6!<%Q)?UF=QZ0FT/L?T):PJ<J%eB70DM&^U>3r7:/Q6U\777)'-B/WH^i&5cI6-nfsiAjS?f#h;1,'d9<Jr`\Tj2#T;0%-J-Z`=ZRdom#3ItB$5_X117Ptohkm(b6*TB*_7gm/scg0^VI\ILGK&b/g=,4!TBJ'L5O7hQ9'LLm-K;5<6r0ImLdXSjZ/ko.h=c8%=%>cU?sMRe2JEVQ&Z+fE]:SSDNR"s_Rd95)DbnhjkS$61I-'5`@/kTY^]"\XJ'(gf7JXhKXk[OXGHXGGiKX9mY`uWU?W3>%0TH$(%'7]c/n#lisq`_OjX@Md;h$MiX3nk7kEcG#D8U;rH>.:.Np1,:#RSMNo.OM*5egnRe;(PXe)+Lra\hOLZDf-q1UTnKK(^>rLE%IZ=%MJef_/%ag:5T0^0*C<Gp@egM+,JBEHMnI.Yr?a`"3<%Cf(R+>9$tFI^4ZPB*j,7>L^uql@Ha5-4BmLE#*J%Y)[A.dooPP9mqJMAV%-g1^<D.;'YN#Yq0pJo[9TC46<>Or7kl2#eaR,)Vk"PF8.d"UNU2BSN80*rD>F,%>Lc"8EYL6#j7(jQ.eq$n>Q:kRe45Wfeje)iJV%0YIORX]QOGig[BI"JRia'<oGi%##oC7qEOFmI@>Ec>'d26/*!5<Ujp$bk0aC,k>+OKgj[<W[B]#fH22aO'j,-f[]>-'#lIaf>OCf%VJc!AGuN/q42[^Ch=o*I%WiqmDc@-!@gTL_!BCm!1OPWCHSGO8H#[HV_=g=.!e2,)*>n=WTIG98Zf:H&#V7U*1tcJ&iOp,f!>>[2%KH^UW)T)oN`pb9f3s)GGNpdX*o+r'*OVd&)M`UrU%kF<(VEX*XJ3+nsgED5A&!o),GV&q1H*::AU7t^LEgh2a"&54h]ElFWP1"]o%(uq!\(0R]*T',+!S)B./IU$2d7%ioY6pbWMnn&LcqJ&R?'jin*7_b8XM-2m0h*KJ>qo+mB$n`4E7"D]j+IIst\pR#eM[?&tM_ilK%0`amuP7M)*adtt0H.5I$k:,e;_3q##joUqNI_82A$62tNg($Co%_![$-GcF[-HW?g*_oX?:$Np2,RNK?'dHYM[U(;3-=e<FiZW,"%![F\V*I0RM(4A-*Ta[8fQ>'#Y>/9i/4ZPZge!(p787:0>oS=/gd<DMM2@=8-$cOFU=thHleXI;\cl$VOc&Df@T^<!jf#"c0$JCHP%R08G\M?A*%C2gd&X.Qm2HmZbcj%ic/#N8g6e*FD:K/T!C[)Q\C%_+rsnDCj-8s</sU/&.pR5M\?HB(pD%+bQ!_Za?Jh\apS%JCib%^!E2[!cLkcc&)O.1]p71UjsbS?3poA's`fs$\!)<O&:jG_QRY&\1B$5>K'HA)V1m%d'`'54rYPp=cF@&q\C_I#9&?a+OC=f%hsA<%%+*E]NH.`9!1@X:?<]7oFiWGppnqFn*'gWJ`0S7EH)ceZ1s<>G_LWEn*<GjjcRC*cX&oR.=M1d#kmZcW*3e6Zco*G5N=<WUa><q+%*CmI?UQhXQJH<oESo4lWn/Hl7"(?%LidDZILJ9oCe)8)`TZ,O+ot]("5U5cpn\@9G#f'nm4dTc^l[8"!%%>q/XUYD<QS0SBbB8&B%0Lsl@"VA5.j$g1&(C[1^&bqAT/#-l,+YYcP$k/)4M*T[7\\B6f3RG3J"Ia5<!pDVN1:lZ%&ckh5=9ZrnW3%#AK'!Zl7h_Dr!S@YZ%JHMo@'3b[%%'_WS3/0'*i9DZD*R=o\a/4EU@V.5D*?d+R7SNr#CSIri]7b^F"<7]qO:[eN3AWHf\ru\??HLptYdPHIP/\<n#P)hi%4<2NZ#S8Pb@,$&HI8DU=%Eh/n(G-q])7]JT!>%F<Y[,Z-ZA@ieK4)nei%U4j"2Gb2'n,m=,C:NVB$1mQjBJc7J2V5(=D]0WJH3KG%g]YM/A.)d@kPXeADB]d&5`9X8QHLXfJo0c\TW\InE4ff%e;:s\cOuBP^m;eC(\%9e+](.i.4,(MV(7(t"Bloj5"2^=M7L0W`+sqS%ie^NWNlf<L/En+\NbD+,TF$+rK]P6s]R2d,Npq?!XY3m9"JU``aBeN\!Wisl&\(6(!&b7SRq%gp#`_XVlT,60bOadiiY;4c%]lEu%D0;JS%?NBnU2=n?54mm`p`5@&!Ge)\U+]FrXcNGmXg`3[OJs!][CRt&3%dc@bB0,mf>)2&=s9PN#b[lRoWW=NRE>N6DG,9B0qr)n%IG:2V!<(?MFBcKJJ5o?<DUJM)S#[?16*>8co^A_+7u0B_1;?bhJ4E=bF_p@#,%.q4i6h<$J^.gB7f_j\k!2Sg8Os[2kkN(<%]UI7%J0u^!+b;m*E!-6e-D3kuc$W\]i+k/(&>X]\7RU'.RE0rF724'AI#\18A;lA&[`jrr?kD!:mkH.5:q.DuR&.=p#RuXO1tS(=>t6N,%jdVtrSg+k,F!H6Y72"D(jQ<-)+S'%URKM@ObO>NTJ"(Ul<;_.ELXJi)4_j<0.QY(/mmUI(-H4nXKGKV3BO1mM=emjGQ5_[emgB>[%DQ?%g;H(bsCENb7C=IoDjnh_kLq1*EXq#Bd=&9^_l#?UI7B5V"!5PIPB`O_T3cdS[3n#VCEYT6[6]M.gX)?A($pdDAnQV0mFe+&o%PYe5-$.4HVcn7#ThBoJkP;Rr#)1_j!(;e:9#d9qWG)MRsJA<=R,*Y7ma_6u0&d!L!'F8g:-9CW]d^pd;/<dOHo?m-)OC0sm!^.tD%]o^?!<2r?-Y/[Ai^5PQTUN(>m&V-3<>tIWmRHeejmZ:5`_2bLY^2q9;Htb=q^]Z*<!G`6lHF@T\]O9u^0n=l(79`RNA.Mdba!%,A%&.m)C6K"><Weu?.:^7fcj7\SPm3)rBkp4j'1MCA#G''0,du57`Wd!'(HBDWY8Y.n^EraEf#d@*A>ruRPMbQLhGu04tD'?S0<%\tB%l*^R23dCshZT+&'k\q7scu_.U"Fc0YY\Y]$2ZU4,ib6YKIK4.t)Eo$<N[YQji"\_EcKtuB3oGj6TV8uN($mUUP1+ticaLcXkmh>s%"?P<KJ7/b4K0Y&O)'9h@JH1pbD[Q%J`\%<qfS]c)RY&A('aD#bq7?%D$94nsMO%Y/#teg-,TI(RRK+6QZ&NXqW$L[#\K8_ZC2@W8%XD6ZM%)1B$!ceDZ?Okq\Djf*Upi6ktK,j*3WEP&89*D[u#XB\?U93PS['#]j5R3WXXHd3b":c8J0oH`sA6)'%-4G"YJi^9=672#s%3/QlN96;90L[[42mgpe+oC;6S4[e4C@]mrA6D,P,26<J>&WgfMB^(XU8$F:0i/&&=40=FLXsHPfinkoP.;?kgl;@i:7;ItF#1HEh%BR('sbV3i6Zo'%FduZA,V;(4<Mho<e/D$(P9(N24'D_eBOP@i'@@CX.\h7[67JSPsEu^61!1Q5`Q*M&.-KJuZ$6X?qJ\dH]=_YSn%?hI,b<[(FnYCbM'K@`6eoKug24R1[RJP]QBJtStt&k#VUGg]!(\:I9YCggi6G.U)7Y\UU:A2q.iGWfDpcCY2EaY9DGMJ^2'Msq;[%_0Z1.=-*X\1)S@^+u4"pp=0C;eS,b7T>WI/)O;(A@&sVJQ8$E*45`aLmI5`G_MdYK,b\I=Zun_7dX4C>kakFLV4n$q7J)1]Lpk#6%&uW]\AnVdR@mn6H(n1)T0W)fX!<BqQ'V,PK$f#[Q;]:td'#EN-JknLHo;Dut5m3:2`E4,cZLDKT,7+Af&MsR<2FLc,(55G;5ar<e%L>ti.^1g/JZ=R[3kq$r(&I>DS,+8NOQDS'J+fT;Dq4b"QHVrbHJKQ.2dSl/Z&V(]G_Y6&>iH^4Gd?^7c@0IU'f"dIT^aIL)<Y]p$%J@6/kSu_)W#b'1tkQsS+E<;S\:2O,bLJP`%$Nhu'lH$Eqlb;W%r<,4mG9e'cklD%C-:niIS+ujtnWUn&#TMI4bLfL_(gkJoFFri,%X@rp6_&r$dUfFZK]nNEg6(<&9Y[Ou=!"+M5i<QlG^c*Ofci>&E8J94V@UEC)Yt#NTJ.;#'84r3FBT!1Oe5eL6W7.t%K/=;eE',&+%_4<.\l6K(4cS4Dc4PEon[6k(o'HA7"#_?iSq@]AZlUmB-AVF&jZ<TpAK+Q\L5oN#0*B")T)',-2&9t'ISsc\o!me/CYI]=m4;l@^%=H$Q/!3kRJo_!Lf"+d$HMJ*+m.7+D-gQV)Q-Ad4RLgC0/Z8=Q^Rl`9j4_Be4Di3rUV'V*RVQdl:C?VHAFJ2SeJ]?-7D9Inu!4%E-%88j0s%1R#^#oZjCW[,d`19?8&LIQN::D*\+&`K9q96`frAt^(BRMs2SBkfcQNBe%U"@S*mn01sQSYQqg-qklY_mVpk_"6X46rkiY%Y8n*<C+<H_A0ssIj81#($j&:nl83C`@?R2C9\I(U-3HlW$6]Pr[1TKV;HKIU8Y'JJ!XMbC&7rA+6kK3J[d^b#ctPZuSKlF29T4<k%X.-%!Tt1it:I7\&Z@r=0UQSXY':a(CkfZGP'4I1M.F+*/_JBM7:qGrm2D'oC-)-RT<pkJgJh[84Cm%s3*ihm9;K^V5ojpbWb;:CJ%!Z.!Ko19Xa@AFA]<Y-SX*GO@bnKPfCV@<dr8/#>_TcT%+0H-b4>_>^.&tGhM:-S&r,<uqUFEi1g^M^j0On'f**D_Q("9?(l;ZIi%%U@Yf^\d-'?,=S\FM0Xg6_[%-KR-mBglZ/%#J@\BkWe5jlNn95'<CS^t!_`i83&Hgq6u4[<&cn(\'+U(p&73\fjP4iDi+a0!2a#D$%5i7hZL,9#fS'A1Y1(^-,!)faJFDJ.XoK8N"9F+l8Ru"/K/OT0ofl/ak[(0_714i2(=saaPO'tIdE7Zou!=Z)UG.bn'(T'Q5"!GrZ%H]1Z!>Wrb%"X"h:Tg,4aK49Q@kqn8j@U%ZM,#Ts8!Z_V63+OT@fQ3l0km/F;^61tF8@*/"i6/Ap3"3S<M'KRidC,(]j1RF(d!9V:%P*4a>\Kjs5cfW^L,.;Rr(jaB!`<9RE\qVgJ>@CHcB'\.*(<=p7Rl3PRJMFCYQF:`K!GLc,<#t=I&V4?VdjB`W)BC-`44`)n!))$2%AM8TuFX@Ss&a3pUmC6O,99X"SB_)O:7&W[tNeAb]/^fKY_3HkZV4YaA%3[EJ12oC/].TBr"c>rC`s<+*e]5QLNW>;9kh0.JQn<i2%O44O,Jq`3R(uMZEBU?+P3?,jT>2HEDo`,EBPCi=j+lg8Q39(90c3^i+Q#=?JMBb*ILS5;j747D!c3/`q5N<]CY`8\lCe>Z/$O!UD%&/]fREZWt\>_BWCY9p?B:5%tl^lsJ_!YhD=S3R?:)2FnFJ;$jG;SeYQAJ+.T$@!$kcWGE#:>m'K!CB$U.]rg8&'L8/!U,0*K[o]O%T*,[q*a,qYYp50?bMtWK+P[Y6MCH'onNDJP7jksd&B)"@BtMG#_Eb.P>oLnC0WsT,+p#`)jQU3rUGuOWpC==6CX\Dp(pV+YR<6`l%dP(s+Y1"6naYR0'gS2SWIZhndkb\>`2MJu2&I>:k92oniLb5G6cXK\'^t+@+%)]!OL/2t?OLcfiYXl,R\ecOrodWDc/Q;maiCTIO%2QSSd]l4<R(fM^FE+D.-(t#[/6Y.B.W^Uai)Uc+Vo&!nE71:Mj.Otp7\iaha,B.pk3,^=-F:a"&G'$O`5gp2hKP+mAE&Eh?1BfGB%o(^=dmK.'&a.a8&@='4#Z&L@^q&n%nM*KYg/P"a@1J_'n>@?`)B`!Ye*[5PjMqee4i#?3QHK).;Y_!FK_NPq<!&P+F7M+"!-S6L#%$#no<JIs4fk^ANIE)24iYqI!gE"2V,*=04RN1'i3K6DuH-QrJQdDaP.8D=nf?Z;2J14tX_+[IOeciC#"TgG;ZY*L`)/KDo"6_LIl%<a?[S!mpHc,3Dca%r5sCiQ1Ki&<e]BrU5W2S:rSkB1@&!7%i#WMW<L5#f>Md'cI<p,YA_9i:+'_d@"F!]qHPV$qkY4XbGpE#kgAq%C\U4*j!99amtqbj!1Di.`0L<b!%ll(GYEa,D9?QLjgpgCYpd^=Hs`DlUUdC[n(SU0(CPH8W'$[hO!HU6/JpZKU'TebXC%H]1N>39%?(H)4O01I9`Ca]>XusdcI<jP20na[mP.Fm9]Eb[D&X0PK=:PJk9k\RbiFJ!7QZg3.7LO_uLMR:ZEcIc:KPF=7QnAIGDWCd"gBtuO%S`L58&\A_UMCYIoX>>`rPO3"Xdn,QUe)Z0@1u9Ve_$7qYjQPO;*#b4-P)X",#ggYu,a`qRLd2rp]@,ZTQ6$n\N1C8@89T)_LM\W,%W7E;kL.oUH&@fQI<P^XU^$h-B&33&Wnhm-N(A4HS,Mp(+:;1RaIck+1?d?KPFlu;Z%P\pNAWh]=1eQ)(3IB8F09;lV&M(.]W<"!1%,L1kO.l6K:J`C/kKd:ICdds?E6T,^N]`ZW%,!3kQ2eAX1Z<='3HdF%sp98C&6>[<TM$D7REL^E@gs6Y'AJ($L`aAp=pjT_URW--J%06-7cbTSec!6L@H,I%nMi(5(<dSKr-)j9TF^Fc\*BWIMq5mT^^'-A%qF_6@O?dG"Tnm%@Lnq7gpTuB9:")R:bKgih"lq5:m)3>D_%iDiKf_(#0MCf<<f#a@5GppP+)H0(GP/N1f5i(\nMNrA`*R=[IGi7W9BG9d5sCgi^^(`nsqGT9"M[P*[o&:l.D,&GTJ9Ur%Q07\XY%grR;QiYA@]/s"@t'3K<hCOJDM;l2+g&s%cZR7'Pe(_&_kD%hd"]K8W\lCqUZ.(bId8MM7V\/8OM=(J_kR*&u4\&*4J1shYLX)T,3%9:A2CW8e/*K0h`87iiHV9HFL=qS(2e0;RQ=&QYe+`L`K[RE7F@']'Z[f4=qPkV_-qU1K+Cd1I?&HUR!GC[7.K-^hf-YYCLh@\Yt0%es3i"Q*G\0o/Y1GIBmd%ABdT\#ka6SD1,]YBV^,sUWJ&\V"oso*AUHeXEWa1$4]]16RH6<S?rKl8Xj5be.g\EEoq4jKb?+&/@!mu%*H=926F^3`jA4@9c#RhQ_'p'hk`/Jc\]AMtK/+hgP?\q-$=,6@.L6&XK4.4d@L[At6uW]gSkiek:`pog;=oPg"*#GpO+iEA[Mprs%=LJ8S!1>BZ<^^S&*>BjA#d&cO'fhFcifrh]9HoC^P(E_uaAYGtaEWOCNA[H_]SO/-7BGD?@mPO73+_tb"%<<f!"P&<?'.-^Hb?X=%jBF>?&MFg*%>97Pb$94"`S+5T(:ga'Pskc,f5+A0TQ=G+<I/_R,u\EO>k]I?E[JT`%"()nFK&ggLSR<=`+bDd@4I^PGGPM=OGN9o%P"DL#6'k!jp;gbN#D7pK.ai-N7Q@+=&1/_b=sR[73>rk<`qq0/_F#[N$BI]2A`\F[W)FZq$r@$c4J^P^7_lI86eV2(I7lt`D-gC4%n%5mHJjL%L1c5p9jI8480+/IP*2s#f1aHoj;76e7N%4Wa(N>CkpCpH4\;:(`cna]#[1)E,[`%jEU4\#FlHZ)g2'Y-+FE@sW;I;>c%![53beuF@F'a!UJgh^Dk+]aX2L+K]0#_=LiIgpCJ!C5P9arH_PN^-7/8;k-$NkgO:6F"pU$SWm'ffT8MJZ`e::($14&]Ht5!YN7$%AWj?,e$]5i/W.sa!f+n?U-8j6[O3lt7A?!`?BaXD'Rt,,;FFQ-ab2_mZ0,%/N@pAK*BTG+bp>6-etELabEIio96WQne&>)_H?.JW%\[merFUft)R9#Yb29'FB8K(f&.b)7rH?.JW/OU-sc58kn+p+;Nd1GIRm)t'fqFi,H`sG[!D&L)S"@<>r4SgTuT\6Us=dk.3A?K&$%BS43=bn-/!SukQcUFJ_N<C/_Z?@g)?<t<_kV$W%mMV!P0+">`M@%jYG?(&!gb`\eP!-CWV<,;\>*CZMrdY22RdPGub\BBn16DI.J%=iH&%<acr1Q9\gj]eQRY!tEus1b[<\=]8J#i>Q_:)G)3?h^JaP%c*eS6V7Z=RNi1aKFZ!pI6:ld5g$B2oZf$l!^dJ1(bWo4[^.4o%23I$:Ki0W4PglhQ#^ff.Bf.o^eA>67kqng8*s67)&Y(5.*X!E*c-jC(\[aO+l&29NFbgOLA&H.a6NGfU*EaSKFg)jkL`PFS==iik%_bAPPBj>Ohc'dR5b*'k2ka%#Q)G>c"mN%Cu:Eq_@riL)Pd5mM)b.Ld4SO*]LQO:d/m2T_]><E-qig"m]a)1kcf9VX4"rW(@`cktW%_j'\49-2Jh4@:+L#cZ.$A9D#0DPPj>APbfJ@.Il"7MCo%$onU:9s<3D/'?5Sd%8;qjD.9u6XTOUZbh)0h'"O/.9u*3/f"B6+V'5c%76JVRfs^qaXs0Os&'O.6=+!n$-]3V+W@^QB0ZG\:e1BNSD@9o=h2sO%bL9-dRN3_.$!?6N2'2.niJ#<q3n8ar>3+J"$s/AAl#`Lg%q'_p!Ki;@sr&gOR[E(_>0XAdO5bqT33NX[q(5mr.kkpc0;+mcmi_co<M4kf/I&li=&'$1fBU4Bm4>C/c/B`T41+!lb(+*hEdVA?_%`:RVIPJoC4#?$,'.?>oPTDLSf.&Aue$jcaKj?X^p,W!d-r\4XU[*7Ua$&!hdD+m\=gB;]aq>fF8\f$'j+]_Hb"TU>P&kCnP'S&&D%\?Ca"A(-Dk%81Ht5Up%q,GuP/qT?0#j@G`"%-<pdJccpH3\>nF'eid]-K1eeQ:NtkH$ujrM?6>4Q_X-';9RDRFE30T3Po5[AS_l5%JqRK=o'?XB^m(Dsb8L"A>KR80+^gRc@]`5CYll<rH?Rl/JX$k80bMM6F0hfKh'>:Il!?]Q6q@F+0+:'3E9r"sZ./#d1(F`J=DkpD%_Qu$PQCs)d6[QWTMapI4[';3u\joCY\H.F:UW->'*.Ir^pPInI$qEul(2g3&M\;$=dK>\/RKLGZ%"1LeU%X:(*)ZQ`l/%.iA1Y%=%_2RnHlA7"&!,@B(-BfOQ$D9rc1V$iT5g.Mg=Y6&A*2]T;]Z,L).?GL3->)V&KEp9`n[d#T84ZKC]WFbR88#jHPT6LB`&LHYpW6fP%17/0CW!R1jV*Y=6,srj"N8RcG8['27+Y7=`9O?<3=Y>`,7#mt_&l^Ab^>f!d>V$q,_NLR2=L'\`G9k45gi*mC/Qr6\(t6&@cep@'%6p_0X87$8B!'66roa,<\>pEd.6?crsg>k3lE$,l)>'OL/@,WGc`NHcs%j\6\<6:F4_,a[SK0YU1)C:m=[`nBLjRK*b7pH2>s4/cI%G6q#E]T.H%e9cp$b6eai9R\_>)QU@Ur>r96Yr5Bgejil7<GiFfYf-/k<`Vl(4=9f?f3!#LSH,+@Z7N(H(SstG;XjH5&AH@?2!']D%^([1l<qV"Ln4Egb,7Peg/.i03l&d7N(Vog3XS+MSaYePi:GbU'YrXcDN0'aCW57J>;6[_!KEsuUfVBKe"B%(q,[Z)X$6euabchq:%?#F(a66D'5=hGc-&k5R;ilCpVW3FDQ'?KtY+!aHHblIl_;i5F05p=T3V'mY7Kj\16qnjb!KO#tbfj`9EbdZV?NOrI_-]<mEn.#S9%C[tFqf$Yhu9UaCS;2Se&=u+0PEUaMVa!9Orm\0.>^lk!\<aHo9cGjfA)Sa6\QQ[fAK!7LI=EHn9FHJV;G6(QW^n`ds]JTu=Gp0"X%\htnKCe;\RNkgs9VU@J#\;f](];>l&0++O5o?'fsOMs.hKL49=7cX9L-=%8p\fHX@LT*(c5dT]!)NgkWSJb2pZDGJOn/IUZa/Mpt%R0h8>!@E:@b[+qU?clMp`6^3\.l53dH.)!LMtT-[oVnf?cS-cXbP$5JN46_jTF;)F1/ZMaiHNnJpcVoe0KTB*RMX([B:87e'^[id%ktu[\6UDc4E?KrWn@2Vmg!AU4(*,GV.9mpW4;D6sAGNgLN)R(u)rgFg-4XQ@"qHkVG-I_dGq:?NZYW-DpU`3XD0?%>3Abcu6u!&<%/M(-La2;NBFEH0t$*TL,Dc,MmXO"4Aos#;p`cU;'0.no39,msAc/^,2'>aO5;ZYHdRkhK%q$HB4.IT`tm27[s;4O)tA-\`i&7fAW%QC(T_#6for7mKELZW:<PeNXdVa49F]=kJoDZmF(^\M/+fk=/6/!%bHWFN9Y@ASM7VrF,LdVHV(eJ=1B`$H1(RQOZ-F\2tF5;e?9h%^(s`]RPO2q71-JeOU1;u5Cb'gI8F6)m!'P%)&@nr,CK^;MNGo-$5C14<m!21P[s*)o(IgBVNjpLAk*te9!`*^S]u$D;ZV%m\qktR%1i*iXT\)#XqeRW)_25qc2ZPa^mF_AeB=UN/fD),s[p.*P(XSDtjfdd*de^QlgFrHk!.V+p%`b,hY;Q6?p#&,]p#"59%j%jhY_J^$%aZ(-n.Gle\D[qQ)W>:90SSicko^KCg?@UZJLX5INnW,tdcW5Tn=72=)ht/sb!8[ml]s$t'hcnnCDgNIG^)i?A>N7l'fGMUpc0s!M%SGqc[a2c>$'!6Z[N7@%^6[::Kk'A*K.aR/49:/6Li:#TC>jY=5D&?HaT/52?>"=POU$6ft4MfZ35CKQ$:\Qf[KB(OsXuaTu)d;CJ%$/=6:)"G7pamind0^/eT_a&>ZpoB9V9`=nM=nVX'j3IER8,e3`)R7k?SSk)q]s2d1q@!h`WV%U9Y7AUTmfd;=IHBWbdY_Y;cL%8^%$C\ljgB?_A>sD#rp![Q0/>kPH@5+-leL_GLXs/EpL9>.t4^%VMPX)Gh'dq[ebuj_4]HNi;l?;e)_6>fb&!](!I,Uuefku9p4:JZQ%Xhf#?:g(d!/4EOep#_cg3kZLV)4QS)M-O!FT+:^mc<,d7rege24"Rl0om1RVI^&J<k&F-hDf7i&Z1RbPc.fRRAT.$NfE/t)qm,)s%/cEA:o(SBjG4GJnjnR$Ih4'kedbS-=HV8R$l0eLrm[eP)h7Wl2=q#Unc+#55?]gc#\'##*:c8"hFE`dMmJ]>bp=Ye<9g'E(lbW<j%$O9YH?\lF<8bN/UH*<)_E6t0:Qstth8T2!`UJ[r>X7A8'MCksS6>^iGhnBL*Y<EP@q;/go!FLLOk+1K.7n9=^>eS!js,,'?JJ__h%Cjn2Y*jlK1h8<8p4a\)rl0"Pob**bILQcUk=R5]Nj&SsHi+??/KO^jQZY]P$kkBZbbVFQc.0e*QQS*T[R$i<Rn+MMUruCXWJYME*%UBpniej"S;82.4o3<]%SV#7mHfem&fs'66*fe+tDq0&C^N$@$I5NTHRmh0K!SURIqhA/D_bD8Xm]0]k@$UM6ep<_>P9IM<Mk?WY1%.2GhV1h",mB[Jr;,)7H8+q.YmcM7/k(onao/Wrq,p5Vnt=m+j$3(JB@VYW^)9:1O@+```%jlf,)\Xl>eS1Zi7ld@W7'g%+&C^nV#%lKi]640;7a5iW[4SVuMY(Cq/qk."(<a;;\^COdqG5XnRIk.6Fsn_Xd`R5/kbU[K\0%-^hGAZ3Bsc$Rf9Gp;i#o),nQ6u)[L[lOqL%s!aSE>fFpcG,O(m5@[lq+@\f1EdlYUG:)UN9?e7t\iJXhVtrg8l4[mXo0aA=`I-&T%Z^GBrmr5"jI.X=g&d,=.jN9f.p1q=QsJB#%[Y5E-CKDkW[Qo]$S9'"]Ef,-SFlf#B)Qtf!`pL'D?^sG7>g:!'Y4U`(lml;0McmAn5`j=(8lFNF\Q;Af*mTA:UkQHMiO*]J]6;up%on)ULcj^JC\C7c;rqq;Nnl`n6-TV(`:S2/mP#FaN(TZZ.U`uC;;KgB7b0>JmQ-Hu`;P)")l(NE92!D@XK@?JPIaK&bO>8k6!@m2`%a[P]ZZnhTEB7AB@^T,SJrMK!j;"H^0YIU"W`U4Y7B:5Y[P=:[\2(Y_S6/lBOjILUjncIZQ;LiWH>lZ9CJEC/<.*prjW6IITPTP"s%l#r!G5BSVfH\VVXr)BTDC:?:bc?FCU.X^1f_TY19Go[r$:+,it!n!E)?Fb_ML0i5):3m.pr:!.iXZj5`KqD^mU9(gJ]1:\lA5c=\%_"_+u5L#o!:[:N2=WWd0j4:GrGie=Bro&Y'SD&72)q"9Aa^ml]Pa1.9YO5Kc04?'IG2puSJ#]ZY=Q?%B+tHUE!Ih4KrU>ZQ^*K&@%ea&a60(!E+7D4Ioc!)O4baJ'DG\*%He7Z(#d>qiobaa?5YC86cqR(C&QOS#d^K=T'Pg?s>\h`M(l8)R"V6ipO8_fYD3m>p<Up;AQ%)!N`hV!O]MFI9rrP7F?OP=<qfbB0,)?(%%$)#[N-LFF>pk$<FCR<0;=R4OfN>Gf:``D%sB*Mrhkbe!kb1?gLX1KcO8E)Gd_Mj)Ca%J1?KJf-ThC,2O5?+B<<i$iem4r-*@&/ANV1G6>@Nc56N/`m(FYF`qEDI^+-SP0L3j.dH<U>GN<&>*)sHIa/,TQR,@aglo(/B\=$C%=\?'%.++9gFXb_('((QI[)NXW^UAt7i"B9`H+(*,QLaCoP\7b<JTbVdg!W&gb-PGLSja04p5>KY?SSg_4S]@F.:.rh]Hu=2Y`8N1%Z]4P:QYc8OZct/q[3/[(gWJc8I&O4VA/n(qq"]dG:\T&ors%;MDX5>lYr^/\-M`D4Bg;'\PJt-!V:02b8"EsV4o@JP#!m$005sWQ%jGfcq^ZA`ZHsR2(Qd'2o\(R_*DNX@m;&&uPMemDH,;8:*)dWE6Onlc6k!-U:j_&L,=asgmA_i)*[5.[S!.K^<+2EO"IpNJ&.?9;^%"YoUX6iC9YnP[6-=6f+0#=ZA&53J@17HX0Ak3Dtg#NRA+.huN^3>V[.4AqXFU?hgCTK`LupXLOEb845,e7ajM,S4.scM7/k(ou->%+peJ8nC`XZs.!<uql!:9-YFhg&b@cJ+Q\I@9K>-GIBFr\F7'p:Lp\@gGqkOs6-!Aq<9TU\(%FV4ki*S%S7tb8-@oi5!4Y-d?61K?%d;a33)]4p^aii`*j`0k^34\8.Y3r2bQH.+(11ba$Hl2s@.s@H,CbRtJ2RE^Cm'5Xao(!'3H%`gm6=.#qf7G%e.pj&MRLG7mHJ^;t%<Hmf+T2';hJo8'tO6R.cSZg(DGeS?W=*H.?EVd*=4\aou;JZSJn'(7Mg7>"6aXF+\HXMj,eA]GOHZLbPk?V/Ge\!BsWo.uJJa`7a%K5Sl*>CRN4>6`p/1Ga/(CDhDee&^9DqBYT2MnF&-kJ>bY&G.#oFW!:A*S:,@J+1/#mfqeW_k?t$5A^#,.LXR68FF7K0h45`)Kap[%K`Z:W2h&K.n<><OqHrE-1=#]/B2l08qb)kAe2tlagdZF0=W&r:m\"A(Q+B4+Y@$P(PPQ)!7t]_2Cs6>H^r>YuQXBt2SRpj=!SHaO%Qt?'P,re^];2W='+C:lU'N*)%'W0*4\6[*kQ>rDn12aFWgFVACbIGePDDRW!)\Jq*E>oM.@H!\egnm<.:@'`RF.TndAa$>tlt#r/%%RTOiO)"ck:fm8fN&.uZoBt.9aU6u%$<@!OZ=/$6`k2T_ons=Br!j2/M9Pc9)X<Z?/FUrQlV!`0>D3j;c('.Rg$O`B>+N=DUo!Ka%lH\Mi;eM]CSEnJ^rDW<b4,Z_mGupJJEi'XAFY<-R3oAZ;MqTbqT?B<oM@AF+3a^`([6Sq2D*He54`7\)s8:Rmq,+khC3dG,>aRIn%MYt$VTp7jDg&@\:U%..UBM3at3I2i0OalPa8`lT&qaX/O@#QWk%,-D'fqPbO.lPj`_Z;aoY$OOm?s\$<C4B$,l'a30CSmTTMCM1=%#Pko/&[J4p5<l5dWR'h$::idFRV;ZKB=+Pjatlr)"u!k2/2@l]F7:rd_-\srnOm4Hm4<l.k;,utfO%i>Y@^(Q)W"I#C8ap=):Vag%pNP$;Ii6c2<IO(Vfp-,F@i<d`f:^,:k*h96"VNDjU18@'C`SO?h3\)#H=A[[=`KM%Vk8E*_X=oi50SjZ7K#tt^";KaW:l4aoCG=l%apF-Balt>.jR38L(4G<-B6%%;Y=1KcNIp:HpbiG)L[&d'e6>.cJqsA3QJ'TU8[53pOa>rrS]UH.UKQ-^]^4juo!5%j9U.7a3ta;`%JM'#6TUD-j*TcLG9=jHQ8mQR=;>t=^\?G>Uo]Osk4rX,jeMT-u4SMnnr?jn+]ufbOdKNLU89)SKH1so3QX\72URuVhasG#PMq!M6%6`nH2S1Bsk<a\[\O[#^,TD?bR;kM)cGAM^<-pkOV5Na)=X*mYrNnS-h6]-RXUeoA0=hHNtm>;u`+Nr"q8:9[i?#=eh#am7b^88`V%FSM"iA*NJ7*PSAfQR":$fATZ:0<_+f\'.KL<0pDVcAKS^q37eco_>;\[e0?\*oGE+>C([N#&j`.55P\5Hj/Z>(`qS'IT:d0+u<AJ%IIlLlrRpYK^CFK5qYhtUI*1%5inb8e`BK)TVuV:llT^[o?Heu;Zb4:6CEgq@0@"9?cohqA6@:BRn!I<6G16]]NdpYIj.P-f4F'cc%T`1U,fGX_A-kKK#NIQ'#A)*gOcVNLPnpU+TkH%"6=Ys`*+sAQM03uhYBJFs=#ebPm4,;tsX$7hPQ"022M76j4E*1&^!@m74N$cH;%emYe0fIC>P`*W<)V"`2TJTC[kpbqu;K!:2-EVd)8+"f4d:;o+Fp<NS29meq.f'eU<Xh52!7=EtUpQc<X3Ta63o<iYB\-c!o(V$ll%;8*Vlke]OkL!Lu^r-UM7.]^D:s#R'A!_89VrD0%";b[5Im7EXTA(<Y7;K%Jgm*!HgJ2&aoYUq^3db:0$CJWVeT^Ti82A]t4]S(D%%U9e\646ZEj1X%V%EG;p99tq)9"S:&J>1uVjB.kj]V2HG5Y)j)#BJ3Z9dss4[lZq)H5:90OrqC+E1B.Zi0b-;*j3s[:^$^e(*0a0`%'6X"/\I@n'T1I8H2pmJLoBb)#jKsk@7%`cca[oQj:;j_#D0*[:D2UmPk?`R[46)l4-SOtoe=B7gq=>p*SEirCM9NNu<*)(Qh)V**%H/@*6R@NN<lF[1uF)g3dbHEbJUFl,19>UkbMuRYp$Ub9DX,)EY?+?qkY3m\.Y5I[nB0%c7Dc:b]n/^)<B"'AQ,tk-f5c&kA`$,J1%]r['_Uu*FcFis&0Fh(&f(P'9_?".WdX/#S4^Vpp)XHMiP1#ScsN*kM;Ot3ARItcmj"hio*:"bJrpH(RiY08165:$m6PNVT'Q`5"2%\EblPAeJHZe*ZF@d/9N6i->FMD!q^<J@p^&#eKl!DAU^M4q$&g]9nE"8\)EPd<K@kNU86oPE=GR*<j>mB/gDFP'PaDEU,l<Nu&t4%Bp=knEnK1)(5l;7hRU;"\0eo,f*`iuXrN^,gp0u[2<\jl8S=A\BDSeUcDm4r@`"WU/<8U,[X+\nKs+%k&%u>pGfX#][<X\qcWFhc%#gj2I[5kLmQgkWl1G!TbZeM%'4dhW_3?,4UF#Ajai0$,So_GDMc)8.]hrqK0B:ofH,@pgc^UF:nfPNBZ**`reG'_O@V3_:8K0@re%EI-"#Q<%F<qu>G#C#r(an(g4)$2`,mY=`!;F*5a:b$)bB9[!'1;U%c^9XT0?"9.g!IeapJs-0YVMt2X!>.KW[?C05JcS[2<kF,sX%F.J2cqf_cl%X.c-DZY/&_3S6o4PRj+DT2;iQ\33,Sm=&jC)t.X=*0M=SmQIo_p/7?O\@!^i1n`C4qRZP`nN$@X(tm-A,hJR=LG_c%GW7^3h&jfOlcMEXeUHaWaY0jS.DPa9p0/_Q@Xm#MEsJ'c)#!IaUZ$Gn&CS_8<aN!'qqZLd*h'oLP>7T'lH6h)Ms*%bok6HuUC5JS%&^mUE_Vuh\(96s#PF_+Erd;]!C]pQamN2Snl>SL>0#))m>$lnjq:2\Y,bP%:bTGD>h/;C+[lm.&4]m@0Z<\N1/*1BP2-q(n@81,%%@)g76mS8&0Zl1j**OgcYrDn.@::\53$<)kBo7H.p12N=Z3:8kq_Ig[rEfn]I07JB$.&/:.)'Z36*=PNAQf%F3%(/MCBO8-ubOgF-%@(ctu^e_oT1[m#=$9iq@_qi;4r^WgXkIpjZ4n]CoT%.+i?Suf`9,K)+<kqnr"+%],N1`bG/O,b\;sa/!]KoIe?l\pPBQ??%V;6.W%n0In-C2;<ZN4q%5T*1Rc)!q"bX.a3R5Aj94SGM9t_-nG<U5]\/1GQ;CWYf>"g*Nmjb,+ZD":ZdskS5pJH$uSJ*%/t,f'g!oST2e/%U+`*P\Yjbk29C:jF-Z7fE/e1hLpb_I(Uf7(Qpces,t7?n;:,(ZoNnr[MTa($Y<M:`b!`[aCgsI?N'F>L3Wl$ic9KYu&G3XSH[U=G%1[aB=cHMGN%,:>=Y8a'C_I&s]@3?9os)j?5)BF!V;4HdBgLEm_AlNlM]`'s*_5\OML]:l-=E/20iFbKO0-6..m,-4b^'DQ\BZ$0d%d-@jl*73WnLu2li^LV*_Bt&gE.GL'alh%&S]0WWK%WZ+K(Zj=h9uGR]B2MiNr#6VNE!Yf]pf_?9:4<1V$[eRB&Q-*n3?<4<W1<"8%f-SS?I]c?W\f_;[<YcP]'BC;36SY15$[,_0!%\sFLn+X&)1P[O6nOj'\/4U'V.jUWk:eZXeN_`(NZh4h?kkn*,ChhE*rp(0hEN[.%%be4.'`L;[G0s?F8,C`1X^M5/!'S^R:MN*toK\I#W1k4rh+&R"!+VrdDXh?Sh8[JMjAn2*g-^D'Gc5C]q>E[b)kOsN1g8JQZN[Le%)RT+@)1\;C$sS#01=jTXaPs=<3C267`[9>R[#JeGF9nOaLD>f:3B/qR$AU8>:Q:=SJj)"Jd3R:M`K%C3PM<UP7]r<7#Y/-.qa##_%nMQR`Bhd9<RUWr[-?&7WH-.Eh@ss9Min_5op$c(m>/cZl4H4ZrU(,p6gO;kkA'Jt@B-n:+`MULq.r;'2$oHWbcLV37i;H#)dLKJ"%2ZG#MNg#r`/Iae3Xr\Hc8<r^.MmTas`&8qiERPEl_[Nf<G'#tD#U?[;mHcfHZKW8^<ku6a0qu!g[[&1%m+B+><j\\Lp8]AQOgVS.%X(>5eG"ALs5:<ao[U^OOMlraJ%37V>hAF;kYf8YH.lLX*1l`!rP"k%qMBTLW-'^i:@k2<B&A6)/9fW>02I>[>o0maA*1L'aN&Gju%IYA6eONZtrB/=;sf\bYF\T.g*Dd#:(X*Jj"dgK>H&A"ue#=KjRqN,+:,IKeeY<WEEC+5ji^dU;YHAlNE_dfngPgRdb:EQ<.E/98&%&G+8o[R[\KeZldaD:0=,UU#[jgkfJ!59D(_5EuJQY=_5aED0*U(h7j*n!iFhS^!LJY?j-0L8L;QfZ1b'.2WjadHhme]Rs/X>$=?e%Q-><:(PbA+aV=g)%1`"U;.E7_"'s$e#kU.(#t^3V>EY]oksKK_)sK_IHS<g&+n\:"O&1\ciTm!oG,isl,"&8a)nZWg:=Q/)Idi;m%`EJit:5ET_:Bh3),"DK=H7*1kp&<q2'Ss!M)RhC37fR'TYk=u_R.Lir])@7^pN80WF@S+'2VhQVW)r[7J:ee_T<uUg*h8'ppp<4o%:W8gF/[tUBGA%d_gI<.K@B9ob'kkH?JD&>GL=0Sfs48YO!.RVb4,d8g7D2dr=)[b$qqkVqd=[\9[L@^S>D/&X@c28PUY*<sFEJ'S%4oF<OY-9miLqCLu-!Q-%'oKH6+<iu7*..Wjg5r*$lh1ibK"S9CZ;FHA$ekT$c9CRDB4YFa?TTZ4<!Y^4-PqWe2ngfK3]=Z^.`U]n%:.F:Cl/bOCs,IRJ7P0Q"Th5O:Th:@F3FD.8ep%):Tj.aR*?G)7a4g<OfjN=s*%nfRefE3qa_4G=k]*9b*<nD)C3d?&f[9ALA%7!E%]`.0&fdAt(V^36fm]=u%;mS!ODqfR/qOo[B+.#,4/T2PQ='tHg07+W.A1;@6#Q6BE!o(Q=pslV?Q"=(Zc>*'D3DfTHhXR,A.\>3t%]&!\ZFP0#@%E>M.QpKmULO[Thgh;VML^J8n)RGbp]Em5^a_CQn0^<j0ie2,/%<1p<Y*W_h"mh`#J0h%NK3g5_mgK;WmtG)D-'O46%C5-F$R'aGqnW36an3,u10bB(pb"!*+@CJ$@+84+/r3ncs^;@*Dfl-L1j)1b2PXd9)@3ifcB&dn#ml29R!9Z9<*gHQZKAcf?<!"ou%78r>JoS$^h1_,7Uhh/gdIonmJF^+5#V<QCkA_Mo[#8Y$2%a#$$DVN!G%:q@[l%)nD__6K[p*Tqsp@.De=8YK@3\J0Z_s%#ZSSgnT%QbQrJQJk7jWAPY;oNT4VR=//>C]O0ZW707*fO%@m"6f`SpkRpt419"[kq.$['r#aodVOjg%"m+B0B.W#G1u%TkC8%lk98"'hBV?J%gK)TkO)<\_;:$?q>Ii/LN*?N-j9)s=6q/s`[b^4sS[?*8jdlC$2EO5AIX09Y!6L3]Viu!DR8?["V9g#W.ajP!'8'>t4k7ekCNM<h%XjNe+Sn\Ff9mf7]e/i]]@RDP6UYd(a3OJUh]K$l(,p>hd[2qnnQl>:4VF9i^>)DoKAZip;)a!`T4ssm"p\)Tg_u>chR+^_VVA";$%f4F5qS\<?E24DG^l/ls_:OdV@)LI2^j)6D%B@`a/h-dX>%tkOL[\JITPN5:k#t6\;j:O[qCWV3;n%IrZqXshP4WY/ZH4#nJGlVk?%EuJdkhT=t^XMH?CAmC#PSXptXe_KsiFriHh3k.dX5spYo8"F$)ftGnln\clHo^puTUR9Z,_djU-hNSC$FlI-B-*5O1I&]Ur-(25f%3:%`o`nRU;5d+hQUD`KYgD=QlH$Ba5*$g\<YmoFQ&+Y!D%.@p!YWJ7b8d-P41gGnIZcYCbr,'7Z9d>@JR\,mK8h*'+hf)@XEXK9$%S):)6J%AiCKn'n41,eGbj"<**@Y:RaTStV+1.;'O6sj^=\/!AY:;frF;sacTHb7`gaVTt9>9'edei[:E?XL0p-OM)dg5QAabQGt[%ftChW'`7Y]&gYU<dLHPPVnJl)Gm(_t6R7h*jq@16h&MF_%B^b2@-8F!KT[m-$..E4L:Cu,)2;S_W^aX'Hrh4c.9ml:XJkb^),I^0%UppCKhss8sq^e_X4)X`F@(>@&'9SS'?Sc?`?jEG"\"5#LFsdMCCAY^7CYUr#,n3Sb']]H?G\\uUV]gCsO\f]a24G#SXl1\CWNc?p%,5tP*$bRZj3.Hs,7KK8o(qas-=8._@/qRj?7!'E5gH6dY$k&&hEE)r#39ZVtXm\ePX^4"34j0d;bH2A.H"oJ6+e@Xc)1"Z7n7N`o%O8bq;!3ol8`>*=ubdus#^1+W=-e?]D13=jMmD5*S_,gXOLI&I,`l>-$\+KhDES*Y*pKT/--ATW$]VdpNp<M8rLkbZT"0.d)kk[eX%pRP0,dQ>:hl\_tj3?32HM@pDE[P\QgN[L_0]iM$m;PdeJgF"2pU1R1J`ITrH1H9X6$3!dB9#OJ2r=C918;;H1_L^Ut%1_EM(HbMZ%ci'E'I%K7<cT7=_P69Xr*K;S)r<Y3t"6%Zmm@BIrgSl0)!_$klN&(1EYGOWZHITq&ou#,idbS>6U7L99707\7Mi;%L1g7`Lf$GqJ%$*W]<e16Hs]NA*M'!B"2Q;oeW=iGtj]X:E^"N`89i@/7d(2Mn_@?r.(T!=Va#UR:gMhG:Q41f111)72925t5XV,&pt<B5emAW<i-%DlgTR]QqoTic!p3<t9@#>K$OO.`:6;\gQ5!d.6LEbER1*/<2HF"^s4@E<dp5j01Zd<<?4[)ObZPP(bb<F(UYFo,aK(./J:8qVrj7%j%.'OM"P2&bJ@RgiRoC=h-q=s&r!k,N0#_(C_o+$FT']id=^+P&=Gd-mIJ)SEdcU9*[G!T1AuYTC9Gj*EB#h=oL?k]`]n7W6G#jE%jkp#hpt00jG))@3IQMWC_fhk@r*%2^]P-n"@PT:>@_'R5/%=@/N01G9K5Qu8`nML,7Ti@kD8m1B/!2<rSt8nN<%sWcjoCZd:7K.0%QJHK_<a**SgQKK5,I"d/17$G=W7$YG+sjWVkb*mX)"+?N$bj'Rp,B;iLn?EF:!@;"eIS'`OVpfCG,+(u3uCFd;IV/@:8)Jr$upf"%N!1ub6t`tb809fJkRS1#3=SFq;eHQnPI!`OiUq!kk/)Gm4&cguXECSqUZ72-A'_O)PJSHk6RlAi;q\:;_.X!f!Gq"Dq;^c.T<EE%%hC3qM\@6-@26cRX3\`u@FS%ZROmLcGg8(^,`a)Ij"!1?:>"j<<Zk)n%jde[V=0C:V*n3G,I#kK#D3Jo%?CK1*@'gi*KKPF>BfRN>%Ac#MOb@.?e>WYsKo!Sencq9bpm#12oF0t+0Z^E[>IFr.\B.Ma1_M2lB%n%m;DSl_dB=;T8%Q`Y!<eei7VS%nGQ&#d;beHGnS2!uZ%.355e<iDLe'`16SY&b?c)]jP9V$cka/9AB;o?!`:;QL-@@CJ,8[l-Xd$k%W#gR,O@_`qBh1Bn21;ro%PZ8#Z(O<*Rs9nB.go86b)%a[7-MK61XW2mq<m;PfpsH=5Ck+<'rG)'uV!J=@bR6(tOt&INB10gdn'F];$[T)>hTV\nHQO'86^*48,faJ]hW+6:A"\ZIe-*qak_%N6<b'H!lcf%]!Ie1jU9c/20,j8W=t"Q?/j'9Ec+'Ummh55pokW9LRm27F5b'?GpHNPKj.R=>*$n@C'Bm=TCa[?%J6n&hSgg3(R5Z%BDhopAkA"XM$97U:W`6lW>-G\H:aN14N`p'PgRo_Krb/[G(mig+lWZW3+Q>TLp,:6&dp$U+h2<W]="P44hDc.kX2HG*naoUH]R&*%XD@.r?JN6gpipW7Dhdr>*uh))n;$q$4a:?uhA]P^8,h)]P8g\I[d$B:qa^4VEUVk%kP3aOo?"mcC[8H:QWC9FHZ\i5[6$&Anupk6%m_GSN8!Rla-6'SKm_=!J^UC#Q0XUM.moNZdp9iVF5HKu%H3&Z!T3..]I<f@(4k"KOE_cZ2D=(!&n,@$9mI7+KA3[#X<eeL^%hCSe%%phHsrOG.=j?<>+cUtPDQh@dAr:lUZs/YsEYPE//iLt^Ee*VuubaX+;X0(3+%K1-*C")/WWgMQ?9j"Zg7ba]snA/cK3k>8i>ISeO%1r>B7]]T!kn[X-i95EG5=jO9<[)5\nkVp<E:$t0u\os!+SF&uJUp<2T[Ogn%K>6B;>?uLNI6HHOa5Np4+9+n"FNaW!D`mu'8aQ*@%c'R1]Q)SZ=:7]]%Xd.sBJ%N-M*9eukjA'pkO4JG`j)3L`BdN+hFSl&q[?OGRj42`JpPn6/XZIWnrFUFOT'>q1B</C[j3=7/SMXEM%=ag9r8uKsoS%[dOLFJe.s/\)=?LEQ=_H\;@DI*/,QMt]M0<s!.-cTKXnf!!@gAA`J"^4$%`:rn"T]D/t8))\`S_7:SI;aSul?An"%X$8sDgKIU!\o[cB<2[0Q\j$H^%4R]h]0H48gtPKdo_4[32K.l;SUQ%cj`Ob):J*,rc.*%@PNVes[83P:a2.*&:B.9KH1^Ldl#ot&%pE"E8*eg0%^;NV-mc2'2J!Jfgp&;YUoX1$BSR-5`F`4uX2-qSO>$B=BT0>,2k3C`(3U+5UV01M?[dJWjS)!7o[Wsr:Fl0N#9.SI!%4MGh8Z0:iYg?R/h5CR<0'[,8+Gg_OnqU]Z>[_&DHVg#%"/Zju757.23ldhL*h7A5QqVD/?="C+GkD"?3DLP@H['%*PqoNKA,)o=A%p$&rFhu=b3I%ApSmXs8+C8]C1>uOD]'ICNe@85M4^N2PPY+t=/T*-f3r,lX0Z.$1kHXB]5h*(btb5pq9Zna_p%pRcBkC_ZT45Der%hDB`^m9t%5K4if"3X(q1h7h_&\irkli"*#u59E+n-[5FH;.KXt+.k_CG5CIRa]$b>lBg27rr(\k2cDd9k\6YYh6l<=?iE2JIH>h<%<2\(NlZW<m=tb#LLF^"2Y,-7:rf,LmS3BU4e9e`LrS$_4ej,6][i=5%R:`bnmYagNbWA`sF6Baoem6k+EVn/KPP@h\[4c__2R1a.%@AhH[Fpi!`r^K6SiGcBW;?,37dHUGr]r@E+qq1aaLNcpMY<S!S_Y_6uRn))'([/:_/!Z^/Z+33![IK2(Hue'%SNbVsY>#>?qZH.1%f/2X7NS8I).J=ss]f@(@%XQd,2V%&2\/FpqI\0o8l?$S:]cf5Wj,H8Q;p0O$++2`l$2YlZm5si(4aD,7F+5G-l2*^;e$j$eO0p?B%<[QeS)9ED`[sfjhD:jJFpM)Of^B8]FWT37?HfF;R`1,^XVg!Oe?.*dH'R--dHq\tR)0]G;8Ul'AqKuMMf^/3(j47RmWDC"loc>(:%:CgbP4U@ZTXdF1ieb-h4-Rit\:Mr>kmELGO4hCU:T6g7V]abpX8,Dn<R2('in8,S#oUJRbqRr)$lI.t!%b@h[5Q+^AGXs?NnGLJP%BD6$'e%`pbK.!Wo:Ym#?5Jj<S.s?6eI.TGdD&C\C&+%fDcOB-e]CZhB3U@dQDPt0rle8J=+7H'jD/?pG#Z@9Y1EKoTdoUAWRW7rE%7`n[,M:QorQfbrcqI&UQ]tHX"O2]ROjgSs,I'WKXlgAB[g_s>i?cP=6Rb#4OTdJjHQ^'0e*=-kr\SlQ:;sfWPo&!nsbS]5*&$pFr%m@!tq4NtS7n;dpnRb-uZ?e=e.5FMNu]f.Pg7";>j<K_aIlc/=I4)70SK:`g``ua%jDo7LZ:)RuCV\A$FobUs'2YaQG-6QKqhh(if%IZs`d=RS@7\-(1DH=Jr1;H\p7gYqhR9%Y`eFAb/BDP3Wn+h:P;rElOpJeIl`T<cM3F(Lq<C8\$$%b!IU7m",%_+0N-lb0Cf7QPDD%\of7aPZe$l;fc]!dJB1ch<N!@^%7h@YL.5t$iJ@Bm?CcR.@l&T#hK%=YZ$o^Cp'C.4,!hZ=m;KOoq0rPBa*o(j5dcMG--qXl1XMo%:74fgG)EpSlP=>p^"BIl5'>2#',tqhp/h,jV;:=VBeRX+.4q)0h`a!U]uk2)*t,Xnd\7(irjXDQjUCI(=ZsaSGo[4<4DIWG6Fbh)%rI'R`f/koLmY?9S)Q^CAKX6[oM>R12#'YM88;sSX`?YE)c+hp[*r0"^l6*T?%IDaV7?cs7;.E&mEW8I7FMLRXl9O'h0HQV:_Z=[4%'n$.g='\$#l7;Fdf27H/`6;Q0`c^WZ.luK>cQ8"3&e+T\%KLC?5s)VMX2F=J+c[d'fXV`(5T+Qo!Gg$JPniut'',[)0.CU3-iVSo%5t-R95Ih6!qr5>0qlponUJ6FEfogupr%tB:cWbMh6O]PJo*P$#I4]SjV3Q"Sm#TX:V#B&]T"fb6jS\EQ)G?MB)R"'7(/')UqM[VK%B;)h;)9DH^e\@TQW(JQ#:5edQXUo&tF;<9GS?fReIOi/'M<bYkc!Q'ccb8m=oe6>Jp:?U=(Fq+am`^Q[c],Hu0iLM:.?AQi+.j%<%$RgcM>JOHJoH^Wrk6BWo@Y%ItF2)^eruorgmj50nqmC4=@QTQ"=Ze<VC@A>BT3>3PZ,rDphsS2!>O&?R\&;uIi]uf'VIgRn@Zads%4-a#ZpLhEX"+#7I0/T@J#m7O:mbGFqg.F8^deT4k[pX1Dl7(J0J"X8ghL<>]^uP?*>So%u9-<os4XA1,:biFD,U:c<OX6]1lQ/(J%\N@uYXemT*ATJmUb1?60PK^_QU#1?pho@rFgl!.Mb`E!!`mr*#V!WgMMf'sB!?2p]U1\0BjsR"`/8`&r6OkP#/iK'd<oV1AD&nS`%-Mb7hN8L__=CJO?&pepYm`fW@HRmDL;\_GChPdfEWgFK:`iq1"1EXW9C8nR<A:M(-9qE'.Ss"?5]bQm_$&eJN+"H-++cRR.9@]<2%?An?PQuk$XFG#U^Y-aq3KAbj()A[TVIr#@:/"),\Jc4?W3=Si*8j3Kch4DKnJ1HnH`>)"mER>)r5k[CrM((4%W)\'0(#'g:i/5K"%>/>1fic1>=mVp0c*BtI5d5m;Y^VG)c,WUKk#&U)d2QH5+YN<j1Lk2,@Q/fp:08qE^n%RU/js]imfU8:XJk%0BiS'qP?@6nP?b`H&%Hq<"4H?C9gUfu%Q,:"4_:Sre3,/<2We"]dKM`3L)6-6H#acQWs".?GHcaG/\C`aN#pQ=p@W2Qmq0Qd8eJ5=H$-0%Qd1:P=!1chR'%!o!.u;l'4YJIYS0)INkXbHPCf`CC8f4O#cG8h3=7FlSD^+>,7.jZ\Z*ZIQ7\!-fCh!*+M5I=AX?QFs$%kV69b5FsTHabR.8^RsMZ%hObTM<;!NQpb^\3,ss4"0%'2\n]?@UO%iXN'IQpaMl"_YWGW7<P$kO%Z?U2j,`Aufba\URHCVgDiEY@nT'1=[8!ea@YH()_Z=4-d%VF.Z<UWEkb:.7]KT>`DW'W3oT,R[P/0Tt)e_I8U?R$[;/27t*GV!4R8S&EkJ)8[=X#N#qJ+dT)_ZWl^A25O5Mi]a3(X=2oh1HaH@%J$-9l/k^YpDb:_>`+s=7*$n4;aN[h_@1Y5kJ"KE(dQe'%_*fH1'oZj3jlb*iFHNukp)"ap9(mL/isY#02t$&^MMV%:KbWM;.80GP%r3Gk5Sa<?;e+rT3q+:O*L1p5;q6]!ORo!fFK@5<oi_&Yj!oWU<'t]^:k@tC2T+e"R9rY]\>8C7P9$ubbTr9Qdk7UX7GZ])MR_OE[%!gj<LUiKaoP%ubC9!OcXm$uu#->C*eWMoA",Toa<[jFOJ\S%$?Dae1?QnR-"!i@EKSGSD"m96s@.k0M84-IQP,L44fT(?tFa!/4=%&.?V@,']"24mDD_+H)d%(/psto>02*]"#Kn[lA.S:%^hJ(htVt['Z"BL'm2MOVsG$B7)-t"Qja]<EdP$q76#IVT#DYg?@VCN'nVU%9HW1A8@6;@8IZHtpM]5[BQ$4o7c%nm$[s!s^-jJ#Sff2^ZV*-sQ!82((Eh+5f9.C_@GV5O`?j53m"47X^I1F?k<F<)GVW$HmT3KO%.F*6R--7'].A=6L/.XdfFI6m>=SH1Co.@fAR>HnJm(<S-UgK."InLSFMO%BSq#&Z%M4&Vl^6k8kA8eXd'!e@!<&&a>m"[PV^Lb-$%bS*4!JHEGAQ.2$F@IireRJ*U^=<%P7S3I1/@7bI;VbZ+?n\bso'uS3$V[3db7Du4:/qj&V6gGr!%0=%`*rA,fUoisd8*BU@hYjDl%c&0Fl;RPJUL$\^'(b?jm^O?.P>EUTiWl8r/MMJQN[2@m`O*r+d,'Dkt[2?fF@,E>?Oksj\*`['EXUCPMq=s@4g+]B3pSZ>o=YBcg%OE;b45DaYf6<D0iVnt9L<*Na[R'@sbV7a!NqY'@5H",<&EIL/r?LEi4.tP19F0.6!9Zc(dS]"j_4<iG$M@uOoS=\;>4l<DT7'76P%l)'3"8eEV`-^VND'iV6?2PZRQQ$"Cf;F*#TeT^E1oXsh?[1n*47V8SNV#k]YN%Qa;(6GAah8j8jC-k'+1N,I%^3pS*&m-ltR#-rg%K8;V"?Vu]sEb$WCr]W.6Q;^2.iqH&t;P]*djq8T#ZYl_f*n`2mM4TFR"'.!4qKd"\pW*9@qen\XY,uQ0T<W::O]4WeDf.Rb%:)qk%buW1c<=GG/L+^)iNlg>iW1clOPZ?),<XT\EU!'U3McL4WVhQh9JhC[.SYLol]7MY9/U39o]'Kd8N,$0q20@LdFKA[8!c$r)gPOYL%F4\d`0Q*tD:3m]=XJ*h?TO[[tILTR6+ZZ=7D!,stakBM9JPWHPRS%a#(fFh=\"95%I93OWW]B/cT/ddt5&L6F":%mN]cZNZD-q,F%,%l;rl%G$PYLA-90li9*MFno(W_s6@r#NGp$_kScpp,umk@(@7O2^td.d*&Z2\illjVRSY?S=U=Pfh%:aApfQP"OkU/qo2FP[mKu%.MX5Qm3u($2(k+#_Xke\P<k(]NRNL!lt3JCa/e(#h8l0k8[6o"SdAOV0ZYX[pADQ8@p\MfG&.idP4FLddf%Y]",D]>Ch+lF`*CbR%2l&0.bn-oi<^RWu_9uslC^uDBH'OG*198qVjRb419QPOkbk)Ul67&M1p?dQCeR?11%uZ]pQ7_L/g!El.i:+Z(9SH'rh)C0^ZY)8&%g.F67;QISWQI9jq=K^>R>fSeFbCM<Ca*3VHs)K>"Zq;uG9.tn=2Pk&-i,:hB^6(=PhigYhe+YLS#@9EKTY2)$?mb<6C)rp*bc?TB%,)1>c3[22?$IN:,nrZt@;?U,d`N-1E4MZ9g(!A0B<M*eMdE]+.n\D>*IJ81BT'5fW.^;12P"X&cSVd0f\lk3H?RNlGZg6_M:o#3n%\K9AD#q3M)T6:(l9."jI;/l6)a-YiQI=7jVm%kkmc;?\+MS,ue@%ZP_)JZ*hBA0&-/RQ8S8X%@6=Q5VgA12#DUp2C$`JL'-qlC^H%;GNXd_N?48;"g/%V&B"W_iELhc(sp6f#J+j*]Y*0UZB1^((9RV\4YOSasiFAOZM_A;<(&]IKk/cW@GrDr17YarVa**GUL2KDE<F6%bj0A@'58jh\J"-P:bX(,)cEaY)$XXd$%HIo.F-05=tF0S/CbnTB;ao/`FTKmqX0Bd<;`)L,[Ef+jr')uS23eI/E*'*&K,T.QW'Js%F/*dA4;"!;^]3Zu&K*j<RZZE'TFC3=&Xf&%_=L0-YRG@u,*Q&iRTH+o'oL'X`qc5UPint[k?s,f0O-dfX/5:DV`M2pZ2?^@QIGHF%<K(M\nXFka'SmpE-?8PQ@PSg??T.nnI5+#.R+fPp:/7ub);5rAfVA9H$cpbk9*NJYAl9EXWs/+[l3\o`c=X#\\iRfX^!+(!8EjeW%V/UkpoQfRF<>"YYfTqr)H98HWOWmIrd8A/8>%5q!eAG]J(QhX_>n:$7rirfZ_^/k[n!m^+4kr'_/.0nEAS%fH>Wj&rXj>+?$MA?E%2hInBELjca/sZr8n(bY@HFW3d7sRPY7G#H=h@acNol./L.tpsGZdlrfqdO9[3`sLIrlTOdE#4fR$)liDO_M8#8l"I%^/@^:*q,.b%bk%8(23oA)rb?P0kC2:U/)jF*,>#kkm4j@Y!\1`m1)Vifi:A65(>#Af`+JV3,N#dua`tPumI!ZfoBgHV)_o<bWR7;]DpQ=U@I[2?%Wc29&"D!qPas>*6<&T+g:h@NQCE1s<R(o"ZBGY_/0Z-hJI8]?m!RHH66Isc=ZrerPoIGJkDUV3NZ_"iC3;5><GZ9"S[`1E'B4G%G%I$T2c;m&J>.oQ'+B2&qobW5'"iA4K0[]]'L'TjkGUpdEJW.YS"9)UB<,5(!*MlB694;UkWMY1HAY=M)5(K$<PGgrmISoT[Oo(j2U%UgKQo36CC0Rb7Qu)nnBm)bu[8--NQO/qmg2r0\Ec(JtO+\1\Y)$?u3RAUMJ&IJ3eljZ,rlU3@0R@^uH6'J:Q/n/mn3--+%?rNl6$%L1+$q7.3ps.XX9PbuIcS&O()neLERsO_UU,U9^%.M@'Ap7$`;.>sTEAk*"\tLC95Zo_4553*E`^JgaDmH!rB%`QckSFWXPc_jOO8%'HKnE%jCu4=6&]rodBH`IH'hFX5g>MgX^iP7XNQsqDWp(gt[7`e+e?>HlF>\F76C2Sp`N0r`<V)qrSQ)mocbr3NUc2ld,)G"M4b6%7k<EjO@@):?Ak(JFbX4cW)<DQ??bQ1Z*=rgYB[>,K>UbDU;?"`VtTZ:Q/Ab;djj^cp[>DFh:h1oSSHE_C0$&Eb,`gG<a)D.1-45p%o-9f$f4&UP)b$K?e&?4U]Amc(A\tDZYj8>m`GU!5Wmgb;p`>s&<S0;jDL?LP+4H,'5%IZaSRtsUp%S/X42&$B*4OBX%C3ahpW'o<%:)biNCo&cQc(=`=5HWC!iY?WQ=+Of!XP%NDc8QHl4\0>.UC+8lf#MVRN7OO?hG1#pD(!.2I7[bnUZS@6X\c?5`sO9)E=;JHO3]+q%7^R6;Ikdc_q&-3];3UY@=FF*b;WM(6@o.HmWHib1gj?`U0?GMgFsQ$A'ntjLesGG)7H$G[PuArLWZg&dO9P4Onie7aRFe?3:H9MZ%9:]G<GMhsT2PN7Ir,3#m07)K!7],TO43.*UeG3Z+8H05uC:^J2#O&H<]k==A4'N]%BJj(Y+$e`C]XV];`VX)h=\Y4s':e3Oo2jBe%e^C"rnhIhH/h%R.S8!JEC:`''#bFc'J*^FjF@iEOD?r6i2;K--EkuM%UiRHR.kdum/ub-hlL/(R2-j*3SRQJ4JSMcl=?Cq^rSjjA%P'30\H7uXo0$1V[k)NbA2-j*3?-7$UkGY8I*RaJ;FA(l"eT=C&Bkc\'X6Gf@0-M;"SCM`1W,fX%I&:Yi1u%S1X6J,8lo`g?;lHS>%`%S'XmS#-3\=,%V`p1F@l&oh_0=mT)#m'[=_:<X!V^58%n/"nqQR!X3hWmU0e)d*Y>Ym:`^4*VKC:^4[#d*WTWi!t?jLU^n\tiN@%eF2puhZ6si*Pg>%`<oo,Pl;E$foK*-J"&g1nEF-eZc<j=lDK'Rk3V!+Ri0Wk:O+ShHZeT(L"\SIn(fV':>m\A1*NnL1Y8j-,_9'K%6;#dLg7Y<tUac]c^+L3dQo`]XE5c3]Kg*,=25K;$MGsnGYtc1/>tu!"W5[a;d:<..BZ_PTDu,*V&"@3%k2b."Z9EASma'ZWm^Z4P%aj9OG]@=%-4]eX`;Z+aE=s]M=+e;M_7!=$"pn>=kmFBebJ]_&+18@f@T=N.).,r+6q_NH5L<9GAh75aka(sRQ5'3]GGVjYo!V]ie%O5K0SS#BY+nbg7%PQoH$PP`S34>=0uG?!f_ooo\G:m[YuQq*cN7Yf91AcuG>OA7*s\WgH0R%D6i>[IcMA>C4]80Yt%8IbX;.9Z$G%>L;u$gXGg`G\LpXS<NAq8iuLpg,V<+@95!!$A^/Z+'^fF$;fjHO""^/!A_'Amd.l(-MoEko'uWJ+o"LBN9e9umOR9oqR1/PQ:PW>%mR;(;__P04SldG3?d$`V.2CF2I03riY]dK7>?JMl]=;&G&_VkcaI(?lN)iB77<M\s;XPh_Aa];!ZZ<#5c5u4Z-/NGBFf$OXQ9u[O%:+i=t7G`Dsgle$n[6;(!0,VQYSb+.9A_qo8kX3m7Vf2@h[<%fN*(s=5B)t+2E(^2OF5F*#F"G7_8N.V)b>itc:rlJsK_Nd*"?(Y.%:ro:DJNrlFm\miTm2L7^@)IZYMR.c@]%@heZ76sB_1k?kiX9rHntj"SH6TaMjdilP8:E#Vr+qbjKtDS8P"L/D=h\jAot=H)`a/*f%go9.FNn$qg0<G-I/MqOs]N=43>!SBlk*/gR*WBoeZPD%d=$G@$N?;SWiJYWpk[O9k0g'*1Rko7V+J&t?kBru&q-pmZdVE9hMO7"]%f1`EpjV=b5:F]h2Sr07m\3Ilc)lkt<Tb,hMn%L6:0rYjAh1#-Eg(THZ0pOMkp`soiV]dP#0<&MV)llRGlBuP%jN<H^'s:Lb@_2NB%2f3r7eZX@%W/)lSK*]5_R%\5P)2@TJ%IZ;pje"::'.uq*pRZj:iZ`,BCR+Nr`R')`qF.t^T6k*AR;S)!^UU>DhQt\?$`\2pT6`@p%E?"%J<9SCa3FBp55@][gKKj#dL-jF3IZ5id8\++HX2\.-J8caAh;nRVoYZQq-P,t:-[Mo+rp7u-NSrK-Br1h(hX97<rg.sAr3j#N%Wr&7R4uV08m75do>k,&FDBsBVIZ"s"]mT`=g1dW0Y-]sqnb2oV1fP4i%bjJ?_u#[E\3&qDGf.Xi%6Z>-VonM9]4n[&cAe=]lT:`e%MXWg,Fp`<$hAho^F4I^:r:MDEe([Y/.UUZ=_fdEo<*"$n$bTsgO\Xr5BqsGNXmeE(k#@W+S^kb&\k/HY<cEVf^H!)\_eVuur^E1J%q/8>DSN8]1XI&T5@17=j,&TW?e#f*7HDatsh"WD!;tf$+mn'UfEk9`O=l0g=r\hI=7cR3!QIuGthSeUOj_pk!F)q$6H@5Hcg6jfM%[9^/R;YtKY@oEEg]oE$$&ZSEio6Y9,k`gi[,2*]3T!aM:YuGh&Bp5d"p)S;p'`3bjIc@/TD?el,V[Ju7,:)M"8[GBrWC'!E:*3G0%V6h\dY\A2V?Y3^Ih4-.)W()s8fr7uN>;u.b(?f/88.&O$e_Sa"PNSl:bK8,lX&MulVl<%eU@XRGCTP,ur0>6c+jFP3:%O;6U)1u#%.]m4j.QpO3Ce,[#e+9rbG\1u+Vo2Tqj.j6V_s>>/2cJ#a8c\:W$<LTt`*beg0'`#IpM8C1DE(Uo7`l,mX.Jm0DOfl:g9;oDk/t1i%'tYb6=Vn[$qK(\UOlc?iRTK`<hFhOGmYXZ>(X)DRB((W#E.F,3A+?@WKHo&KZdAFVdNqTY_L1EFF'?GNp!fHIgnjNq40cs.HsLQ!%drGBbO<+3>?YWQZqDOO&E8h=bgES0)I_,LI?2EMfYsPaamoc1@ZY\<[9SI5_r'L,t7#!Nus3fcHMB1k`j09ar;YA"CFbFN<Q3*Z5%<%-jehK+rZ$CLQZj.-&U:Ysi1q1UlP`%^jij2A.F'L7uY'qO+.e[6:9VR4MA<\1_G7t$QjPKS$M=RPp*$E_shoe?X'9Y#,*FXU;W%N)bD.21WjDOJEVI.FeE1A>^qW!NO]NcGl'+;us#M!(Lld/7&LY=p+R"[=.:c'fWJe(&/j:J:k[_\M^ga0\VJB)+#H280D:[Ot_US%m'H_^CHqKX8lBAK#[m5ag#$DT<d/=-eQ``6XhV@QYToD8/BmoPf[$T"r6uWMbh/7`!OhedQuDUS<hES"po--$eOKP4._pJD[&XC-%a")4\G)tqXQh#S$NGOB\PY[;#5J35!QWN-1\WlR?DIiW*Qh'7,Ob4C5_dCQqYe5`lpsh%ZgO2<WIrQpprq@XebtIjrl2JiC>frtX%$KtIE[o5%Ns&L&Ns/ga*59&nbYAlJM-f41`8S:C2qHcBD['+F,e:./gI9rMnQeq%Pn?%.HF>hVip\Gos(#%CTs876Bp*RKUc\D:J%Hi<r7P/##MIKsM?<6s)<n+HRe9!5AYcopl!^P1dqEp2q<YM[/`S+Bp5n\'BW7s<_RpB<L+m!5el_#rCA6hO+?p"QemnXrh*5CI!)%\PdUsZ_5(k?GD+gri.^C6f.-QTV1%M.J=MEofLeXr)kCD*H84>_5?Xl=jUMpYMWYtP&9M*mQS@g;"OZhp\Gp.(AR^?`k?g+#?2I&%q)sK^I%RT5rR-&kp/!WsXa^+iL>`^<qTWlpTtf-]41"7Zb>X.AYM[+G]mc5nr=6QlY>Xp7n+Ab%iEB6W*pR(H<kl$Y/^Bo.ou6\%%*B\nS_1%)br=7IqmpET.F<BCsKAZ7Ap[S4*F`O+%+5`d[orE#aF8L?&292kHr=5cQpt'?:S^5"$mpJj2-Q[YpHi<Z%iBQdk,^rnp%egIEf-'J%Ag[O+gofG.igh.4Hq7V7UCsQ=D?[<gOk9Xj/IimQLfKSt/^VesLpF/O)s)r_+mTbat]8CO@,5#pLqK7hc?+9[lMP7rF%lW6`U%_>a6d.dAWXQJk:A"S1Qhnceu*W"84\_$;3^:mCUfC'C<?GF@jIL"cqpY#<2I8LaI*4O^OYMYZ__lI#?e5m-&YMX5!ZG+k-%^JiEApKkUee%=b<fGEH2GAs;*S58C-n+GFF?.?!*#G2Cul1b%&\_j]bZ-TV!g;g?Y`4^VZEU@nLh\To9cJ@f1+@W4J5Rr"Ahnb1Y%[U'JoYM[/"Yp,;@IBR!BaSB'=G3NM/I$.KZYM]=O:tB(SjWpm&][uV9FI5GQl_dg)G6$fVlIp[[kMGt0*@r0?XQ'.m"gM4uYO<VU%IQ9qh]6SVhN0!dUV>e[d.aH..6MG]k*h7I>=16aY;k^H3]fCH%+'f,DI8f^9PtjZkhR&+Weo0up3hJ>l96BJ_C>\CT5F4pBI)!&b%nA`jarVh^02aT[Xda@AnYK_fef1YGa&-)1fh4NS355Xo[l,UC`<n:Rt5IU**A%;C5`e>XU5AnE9?_9H%oWR/u08K2UeShYKI![rf%IIZ7S_X\OUIQLiMI"1k-m+kRl]&J4s\GbFT\S"-4O8&XdZZ@A(rHVu;O/)G%*;:9LroVMn+'tI`H2@N0ST?<bh``+=0#'LJ3o3uM%GN7J`UMf0c>lNdB[;3fIrd!RuJ+N!O.G=T'gNiM\SY(@;R]Sb7^LWtOrH\(C4*H(_]^`nZE;>R^mtWF`gY;2RrB@?rH_9_3H[k*R%I/6#hI<_en>2ECFZbCU$k-h.*9%htVlgN^1q?E;29h05@okki!eX(aZbLY_<_Y0&j^n@i35iOuLO2%1G',Sr4ID=BEnRU!c5CAB3%ECZAh*@k2JXun_QF6gon^YChro_#ihbMQM'r8Wp+c^(/rP4\WL*4ke4j?NVJo$snXk*j5b$^^>;=WWUk4C`a<esfuWs(?6Hd*QZI%WhR&dDcK.L[^OdMS;k^]*uC4rrc3;I5$stnq:h1hpZ%7XBA]4ds)@i3oBYk;I<Trto&A5sHfs30R^Ug\YIsf/ri[-@`hfU*StFo+%fB2BT=3Trf&Z(Es*hE=KCZuk#lGBS\T]?JFgq3<*p!V1\YMrnGi*.jI.,$hPc2+d*_)o)qL@l'-a@:FP+`lZ90KW>7AQIH-9J\H<%VOulTY50H!F6t(GH0-AnQm9XBMEQ>W^uh^\G^98Y-$qf&CTe5K(JcZ5]Y&:Xg,3sBfUn3t7t3M$s"JkG;ZEu$s0/oB]s(cA[&3lq%B\]S:=P&&tBCgEIK2I-.ZLJ^\"ZK1im-`"pDTo/2j.u\'F8r>SkJiJL2`+TsSf]'fNgd"aQQ?'5L_III@BQ36NLrH#G<^MiMOFG5%A8\]$F?ER`@`/U>?5mL'm>O?+Fjr"V1>Cup@G60pf5CV5QX>ZFf$d,CgT.8)B!HI-*aeNcrpQe"Z,b1]s"8f_3s<37DnMT'5B5Z5%p)dKTJ%2rZ;^9CfNk*g^Y'X<B)ts'WbGXN08i1_dfD`:&VS73uI(4<@kK7_XUurPCqKVY99><U$2=S340o_@`D]^'lhu)f^\f''@%4E?/&mW^Sq(XJ)qAa/WbnPn5#5Aie'hHMWPi8-`Ae8Mjnm@L:SSoB`:_]/NsjaZqYY`ECFgG+5i5PJRd,fRP#jqtn5hep/2\TDcM%qY(rL?bSn8ID!.2Bpd`0blHnpcTRS.n\g."B<<5Y&M)jNZ5;uE=O"diEW=G`@K"/(Zh;)I\b3'd3kbAD$nJ[YQaU86STrn17Pd+9%l)-bk.qpX7H6,:HXV1%$I24p@,d0Z!0Yc$l57^"lXIp\kAB#t(\ajD<PPOM?50f:k6`#ra'lD<h>sT+d>B=h0rO^e\-h<9W\[hXF%@^<=2]>@&7@A^TNo/#\K^H_[/(tR#N%7>C:_mqr*!H`nU2tPn(%m5*S4;($]on$Lpd8Dm1AO1+Y'FQ8N?#I'UqTMF8#(&_<':0aD%>/o;=TQ^7c*A=Yi*nVB>l!nW/m<8=l.:A)dI9:c%?]ZpVD>G)UiD3^Hq5Y<<%F:>I?[VV9baT8L9(S=nVq8(Q+aV\A9FkB,X0RC`%hDfhd]O:WkhQGp@Coj[=R*56-R&\D>:1g[PU/kAWXoEP;mNnaVotO7n3m0?cYb0egm(p=,^M^b44kUi=IJW]]O,lLnqT+X<3pOba%rGe@M0J0\JLN/=H;E5t23[,A(^V"n\/$F>#/I"TMLMO@QLHeQsI-7(6c*(I!G9!BQ]?a+u>V;XnYRtgAI=6+G!g729@2XhngaHe`%4<HV,M(c!S"+$aJA=n'i7e9>hV;J?PQ.<K^'CmY+^Ak0IF)siRX>TAOYP>dZ8S;keO%?C!HM$p7,kCo!G3a4ml9+ZHmsajuAK`,]%^C]R'h>4A=J?TGea7jK[+n=4_MGm!Xir$J':Wa&WC\ti=`ffmCGj'Lfih/KrZg\Ii")4tEp-R'pqXS(!hZGTkI4"QLL2lt;qOT@5%55_0g%/S\7K*a:$&n9FmTC><(n25*Mmng3#GJk^rDniT=FN].lL]-*).;NMGNa=O4W@M%/oF:/SVmiZPM21,f;h(:e4\d^D$@MD(%lCWRpN-\C2r0dQ&[R]N,klDh%F4<F0f1H"t>5_4rHo.GB5G+Q.gTAYaX`#OLK"EP2oZp#`rA)f>:[=YQSC6jQ:%tag\T[e=jtPq4%gcDY=IdZn5p%.FCA_dsHKQTeVraU%?828[9+cX"$0s_lZc\h-Z-AgQ'@'9$7I&\p.Y:6i_r"Y3bI8-Dhjf`>+m;!%X:$M/ed(ZAR%es*n30sn,5KWfb\@q]4J8Co+.g)/Pq'GA1Bf.i$R220trrbBI"^8@"e/Kre7n\VtjEkD<&<b%sgGl>$Hs37)JH#\k8q<<QW+,Fr6%6Eu9u)>FC'gq??V=NLXuSM?+0?""@rGXn;"C=`AE.Vpc@4^@)#=815`;\AI[GVJU0W36&;>Z(]=)pUll(.oPo>T;T7rD<WI,oT<d%K3s0N2&i-hXIKoUoB[nI`eq>!kg\jKS`d\I8B'u*o^hXTEh2*,9#1>%0/d-coD15cY%!RL1pt`+9JLg)YFIUM%':JLXJduajStcV%(fQC"d<i3eL2ia&_2$#&gE0ej]Y""-YNLDK?9Gdfh89#BCW>.XrTqejG<7m1G5grcMf6$g^=ml2@I_k,qLtP"Y?af[im.7eB02$q%!lOK%3dr7H6Xl54IG4oU1Q>`=A%M6jlB0h6Sm;2'G]6];1>+cMm]N-a>$F47HXRdUe^I1746D<pPCNT1'7O95$=e8?mcct6SJF/U%3-'$%h8[K.X4OiKc##/C2o<b9Qemls%J0G5eSkknfDYMaj7aMdVt#Q6k>'IOm5:1Gik+M=jiYKQLI7HQWXmu>*C"ti@i.G*f,&-P%7k^b4V3AsGT*P5kdcunNgfRb9T&%1(c7Q/(E6jhF?GCu4l,;=$,Rg9W:#0EdX(&JTRdYo_/jHM5i78jEl@nRT,n^1T/=T*QT4#Fo%l"[u:o1s1m(&?J=4(.DVO3<PDp(k]F?X8qhVcMAZa3[U1^KY#N60d?_iXE=T1`E7Yn6mfR4s"Wlcm(MsAl\fgajJ?hjU[iVQF9$2%NF2+F.t>.=hYuGnIeWb,q8;"UJ:OPWd4kO\/"7oObO^kqp6BDLaQsSINIP5F_k)&3h]M(n[gi@ZkO'tMcWfSe],uq5jORo!eL*nc%gt?(M6g,`!@^;7im,+V8]leB:D!WEqi9aD<H'_lb+tq7<XbUfmqG/aeZgOnER?]A`#?u!:UVE/!0ZF&Y1Nmd:am!_>4b%nHmcDoa%r85ZWSGgj'@F^0U#trkMb!\C?^"M8PfDBSTkU4-M*<+#t4T9d*ECs:bT0Kc*kMim^B9m'e4h,F1&@*j?8H$Z9puUN\6=(1opcA$p%R_56K>[o3+9%MJ'lU(;@mgnRFf!XQ1YD5T#bL8uTlu^M#>!7:c!"o5/WU:\4.mJ%.@rJ!bI-c4Xcag^_:VQejk2+k,ns.OeOkBR2%.O>TW,HLB^OH_l7N*KKa"=\V0);-*5bT>HNU4kYF)!7$#k''papooi_4nI.!B>qNd?Eh_7p;=Sok!n+<o@.u%ZuG]Zg\C;bH,8sm%o.Tn6o[[7?p<gH^J);pQqd'381CmelJ)B'f%R^9SQ?F+"2j`]7i3#5e0?Bj4TCOKXKnAH?p$B?e/jDO3O2'Bc6(of>4$F`Oe&MW=%o(I`E0>:T.qLtr85&9a")Ir%sKO]Y8(O!Er*jq@\I0G'GFS)'^E)L#FQ0*`]a9=ML;d<H9IVGsdG+`OYh)m!LoC'DSHlhIc]&6=5%(S!Iup,L(#S0ROb0$eq,k[@_f\U<t`KpZ)!L#mcba-tVE4e)*Z^Zeg9hn6\\8fl/go(@FP#M/>#MtpF:q<#ibkP%9=3?6L@qaJET%cTV/]BC(h:5q9m4ofZXOgDoVH.IUp9fD1_ZbjA_TCnj5Aot:FirVh6CPX2H/OrLQ1r97qoeEd*1jONS:g%ch_]!G8#jM>c"_/2Ln%?5EoGcb]QJQ+XYHr_&NhE6J8^--(t,;Z7c=j@\V8%or1J:eLSF<H>1a4t?2+<67"Qq<q:'qMK<SrDtI/BT/2HWfh;---JAMP[Lf=%o7NjjjrO6XS*tVYYEgNBc%o\<:fAOYIsmBmY3QWU!TQ7bd,p-ANe6[=Zp/ih9rD%KQJHY3N=Ym*?MfEjj.F<j]5qa%DF%Lq@:'"<%95FNOFT0ml4+CJXA2`Dp?/NPh]=NbBG:i]2F81(<I=$/8q<I,20.o?h#CW!Tj0bZ6riEiej4,rm!MBBceGUo\=.q6O07*-bs*&YF%4.<!]`]V!-qO)L1/M&Ogo$bm>O8kk=GeC<Qr3+^V:]>S$h1AeRrseTBrcakJND5<h"Sr^\DEV9-iO4[,pu9ljL#pA@(Z'SMpt,4p%^YZVPo'UuD:BA%VII$=/Mi4JKF5+abp:J9YlHSgc>19+(_uK@rHMD_n=M-p!GQ3..514p.5172a/e$0\(CPlfL0FL.rV2u`nM`c6%Zfi4/00];N=F>jYD_IKGpX<dkf8LS[URf9]X+at?fkAEbKn3Pe9/[Y,1?)Q/3[i:J8To*#6%aWP9_-\N$>H5a&7fE&?q+bWAE#FW%a>l@sAqPeuNZ^,NhRH!11Y.;J&YG"0`$J3cg(6@_a#'6feOUd+)&^IKBuJ:$2b&6k@6Rl%U6f*PPa`Odh4qtW822@L&.Ld8BoYNI%nu*#BOe9T(`gCCN0Z1CkZ]Y0I'XGD+c(_&d.uZMJ`0"C@#k:b:DIsQqJ\'MgN-(lYL05AbJ-Y?d/^?=K4T0&-8@--&9M:nd&17m)%M"Kje/oIBK+Yi%j6O8uI*)&%gR=V4[#1JZJRSgij_A"EF^LEu>#OA?ZPFYFnR`/u!N#'?0!:I7_P(IA-_haSIBOl\j73hHU3<jl*%?I;+sa(EP46?"1'Uh"KblJ0ki.1K4)80C-<6aUM_L*:M[D=E_jBV'qqj\$I`1_uN5K+D))^e!nri2.YUJ0-Po`3.>rS\/MhW<:@$%g&-psj(oW]_F11+PX!R$i!TZi@l#h64EiWQQ3Z>B$<Ze;FIn9OBj/q9qDaK-2\t0%3&JS&nD%RL(!4(`J3!oERV%SGHBD5eGL[,>%b_I&!6e7\33Z_u1$u[(/$TEYl%()*aCID3GN$("DM)8r4LOjX^&YsW7!bc\,HB3&(N(Ca2VMR#fRs2e1J8AmlgJRa-Fd(i,N0DAr%K/uPf:\6l*Bo3c7adC%.+VhhD*Ofo'\5DlA,E?GaEAoQ+?MJ$h`*I=`43d7+NG5--4`O%[U)uaT/H29d^S@DVJ1\Z0nc=Y[l-7'e%BchWebAgQ":RF.Go0kujQW,<\!ONS.ISmr$)9oNY/)E7RD*)2cQA-mU6]c/,]5TXD[Xe0]XF?>Dm`XA&7.!'HUaaXY.N#E3YX(T\%&:jPb5o6CIYGr`#ouY7W'b/?O22!4td7NpC]L(hm5^P0fh24+*N;Dq-pgag3k7!/Zll-Dj"l8X%[*`S=cN,c/d5sKe6o-Ih'21L?%%7)qY1Qt^&Lh.7XM>B$d8V5nU7s#`(paf")78"m]`_jf"&4`E#Yg+Z^fj8XM4k;DfS7nn2J0a8;Zn^Cp(*0Z,a#qe5#U(N^J-3Jc%JDL>^`XKGd8Y5_[Z1(;SbL,++0f*1re(BN\9sG?@i;4\ZNLqChP_UNR7"co-45WuoSX!WCi8-Y.dG=N,VZFgn@t&Cl*+9GC:hS1:%=\cG_-7!gT]&iG>H/A7s-Hpa)+pic0Ok!O#cj1e7FII$F9<:3gC88Vt'JrC-0RZZEI\6k9oW)[]M.]N"UhH5/4!h?p;S1Uj9Vd>d%46ZbZ15>#Hbjf1A$8U^2jFKC(]HG3-4!\>B=ckuQQ+r'nY&H4$\h-0"G&5KUIN)L5?r,0/?um,?I7\8+/7)S#1nVmrj8b+2\%Vo5%o]Hqn,VcbP,[if@S!!@Z#F3PH!>e8do>]^<!=GEA-ih;6$?7Y\1\@1,nltRcg4JFYH@tf3Y4<<RA0@/'`<uHN-Lb)EK1WYp\lBdd%M;?7SZQP`abf@mVO9V/W5YLKim\.LJ2I?Im`l[p`%@WC#aYk"j4-=X+aU(,?_6Xb_YaKm6OU1@--n:+MW_A+3A9/=u6cT`_`9ImK%4a)WXXhnTR&/%=MaU&i^A@g$>Tb-rq=<N#?3hpjiJ/2t.Pb@4'bC8e]dGt_"()-cf8TOe(Lj+#=J<H'fa2tR580)#lnK\Z$jcqA1%7B^m*aQ9UbDUc!180b?9nN6lmC.PjspG*1(3hMW`5R?WG;+V6?_Bt(LN=1#0L.SamQH*2M"<KnE%<Eg.",W7=qAi6bof'W2NMC5S%'/bY0@f:r[;Z3pa8j:?H)N4Pi$EJku)ek`gQh!$YZA9bi0K-@>S=dS>8!:lU+1%OV7[erA@OFsFaZOd+0UI/VaF`F7@Zd&[D(X+e%e%hTNiL*7[1*a-NCoI5U2p:'7oi(uT'[ORF+l+#SL<VHK.XFSi>:Jjp9\SSe4^k[;;B"3#b1304!#^nR5>iY*'1YTW4MPF%(jq%]%im`Kq$t`$a;JR5-cD\shObh'Pp(p$TJ;L:CP%\Rk/SPc5YC28#C%P910uE0IG;UL1dLZqY!&K9d0D*gM)b">t#]V;P\qO!RcU\,_%R;=)Wi*%rW+s@UTjBS--S?*a[$4fOm$s8]fZ&k;"_8\9J[r#gbp(/)VKWnXF%1*m>QoPtG6?kEE(j2TE%)@]`CT&Vn.!AAI,a'>u%(pY`TBRrVkGd\F,Ef0L\0oK-"[#qmQc1Sl0,&NYPju1'I_=E]=/C:Q9Q:irj2IcWj$\ssoK=:K8-V`I5,nS`V-3XVilDk))?acp>%K%@]E5YSti1cFZB,'A9PfcGog7)+^i"qrd)O@;[?STrn>8($6$Lt60ZQ/5pLODK^]GTZ#j;GSl3j,j$Z;B3ZqFgOF?TWOb'5ZBRs%8lm,8!uq59m:Ze`i!_81K3J#$FdY:Y_uQ#RaX"m^MeUBL9uH'N1<AH5Tq.C+ntXQ!`5TAfDA*)g3%27-RpOfdQK:%(j[S,c*#M]p%@b\p[o.^``o<f.s7/1sU7WpoD[qHKYJ;;5mUK@nc1tnli!6TC\GR<'ZE+I@j>8]O]%t!;f0I0-Y@p("a<[@0on4Q7k^.1S7-k(8%%gfSfbiVAfT;@'D*GNF/sP/lpI)2J,pZ6m23%/=l/\,b@K<$OK0`$8"W(Bu+'TAe=27U(/`3h*`hi*=uFb]")Gp+`*r#u>%0#!L:l%<jn55nmZ&#gV2FB#VT]EGSS(,4M4/F2sjIe1&uQ_:"=cl7X6kJ:f/"MqFo[^/Da#X6^apLWAhhQ?^&2`((e(b&5BB0BcsE]QubLm%bauPO?2!:Z,'>N_6,F[#.!cl+BSu,+FYn80KjnDG-APG02sf;8*Sbo\i!D9lou\MHW#L`I*bjl0)749Rb<-1[FPiU]W,t'P<o/m<%^SrB!QlX2Q6&=uA$pn_LHH-,4<]"!."EOu?p#eaFc2(m%b$)ZW3S:9rS.JS8-Uedagc/Gf%[j)12i1@f9Hff4)c0(JF139+1<.,q%'2n"*"%Kq,q:QUiP>NYS+<-kRS`4CZKq&m-?M1`-/AVR2[fI\q;#[mE&Vlh[7F)1&<PV)H(4*Zd,C'@>&@?4jM[*jkeEn%\@uA7F%K&P'DAKN<slmI8:d#fTf3r5QE]qNVhWes>bB-G=-I/onmB]o)?-(/=\f?PL8d.p(sY`.u:2G>?T-?\^kXU"6Hdnh!!#Ne%_gT8f"%-ne/4VOr$RAK8Tm]?(6<MrP:A`Te(K*6,rMBZ10ioZfMbNoLGfgTp\988k>b9MLr2@Yc&B`?PUq*0YEb)7'61"g1$L?nMZl<3%^(%TbO[MOJr@\`%>VlaXU0\b7WJV<PE_=feI+ZBn%c/SiNPc;rX6%Sd<.J:E98o!0JQa-P*kD%]XnMVRaC_gad;N>9aZTWT.047cUn/%Y(m?q.'QO0LDD^geEmiWl)Be70K?*lL2i&-B8r!-C#c#GNk$ILeg8!3#T8$QW7Ff2C^4Q-Y!1AoFGDi7;f8!#jN+>hp!oJqHEGIR%DDdEjZa7-$2C?i2:q.^]lPO-^Y;&h)8>T3hf/WP<SDq)KHgp1W[6n^bZ$Wr#5W8l6i<&(WdZ1rR<VG49)NAF542sr$c1;--9Z$.b%"(2cmL;eM;p0qfIXRG%%9WS=s#9IkE15noq_./S6@bpd]>ok.TQ9V%4G^E+[n&6Mk6s>Rm=X7u<R-'G<]dUfbcOViS-B`slK@kW`%BUB8::fNj..?G>"JQ#!n0q2h!N\h5n1^9<6)J1eti/!IR"prJu,>(*3M.W<dKQ>2cT!IJ.ik5XZq%Qf/6sDfq,qoLdi7S`ST.LpC%'Jf82L5SVJp<V65R7TsqDDAQg=H\bAYmGqk0b<Rlg2)Ps*(\Zma%uM"XQ0qUa:cgT@q1d)G0%ml0H3sAm=uCRga]pa&hFC5#jI;*%XQ6pn<0?mqnJ=I1Z!'YZ"Xg,Y91FOVG]:mcaf\Y;/#cSb#[\Qm"pJF'>M1VPA'<p>bml.XA.KqX-k*+iF@"KoAG`T!S7t"DOM!?R%B[N5Z<<U5QZ!k7F1m)Lrk"H9!O%pZ%l?dL2749Y43s/3H)$_iqhFM1?_:m=6aFXap<Y07m&ke/HKF<u_]pNKM%D53FaD$A_8;-bj%le9a*XcZ+ZJ<Zbl.A8hq*Ro@@Mfr'9W<BqCFK1(!9'TV+lVejqr#ghK*7/FG?'A,(M<Xr&9!;O4iZ'/&&E>keCap^b^r[(SAt.41%k!rX2@7s:j_f764UF^.FC;('0@@F(88h4HM#T:VB6oiKMFIMir=\6inYcFt[<t^r\lj5I/Je(V@_UM0#h-<iHkLoP;<Z)gZ1g&s1%6ZA24((5>,YQ@8!F:jHP7)Nrc*h]KCrid3Y+rA9.UOj'UV7#hWG3qi>YsV?P7`m6oP!4BF_kDiU_'R(?)Ec,^CI0mKaaD(YB.+)N%KjiufZ%43dc$5sQ'65lZM,BB&q->.:0L>8^j#EpM<AM+g:`aGCK0g@%4\-L!aWJUpY`50+P*n^TF'6]9K<!=C5:^n:4'=:L2Pd,k%/.,70+",l^O=rKYbJJhhP1J%MW.k3/\opo@]3GLA-,;nh?6\Zf]fMQV22!h,D5ZtSW9J[MR,&Yo'FraZHj'6ZZk8_@3fR#&b31P(%TM^FNTGU?$JZ.S(/'t(.Vb>;\(efpnMa7k%R^/L&U'JagF,edc.,4A$.=81DP,=\$!,&`>YiJ"t"9r9I`!eYa@.K^:L\rHab[fmW%,F=qCoA[k/go+NX^c9bLomfUjggZ0BYgsa.=hkr\7F^$6U*rkZ36X3%&I]-E&98^JG,hGS)J>@i2-A9TY$d5?MpE-f93R'jhr6Y,%B1RhK>)c'Id4^)=.]*,c,[\SOkuJHq)Q20T%["SM(s`3=P_Q/+Z2f,*WbDT&>M5r%+PX1e=:ODl?G_/6al'0<Q,X+?4\[Z?)Q,Q+%`!p3P+bbt93iY`I[3cQ?,WGH1'MTISC^k?"Ve(,sJ][%23(`_ITGZ^R"U/S`_EhaZ=m31P4/sTRObHUO$ROPcPFka0efrqN6V>(Z%!_^BH6)iljph')f%sFFt5V&O6;HjRt8lJ?DjuR>76R=BXJVAYZ9W%2T\d3%'UlpUhX>S,bXmI6&3dtr!?04"Ga.j]$Jpf]g4qYB8%d2qo9c$^=YHCAX3XA.L^)Pi+f6(&AH7s6n"J4:4-goQ^24%uVhB/8AIeiaR>1i,8p:Vq?+R223A'9p(Y5,Nss%o$?N+[^^ag6f7m%D!qb8@.+a?a.g3@Pq4<"N2-)1!Fo&'[IQ>D<P;0nR#NN_'++BFOfS55IZ]B&R;Kq?A3FY-Z03CkIBjn`T$:bUk7\;^Pgr&IJ6M#k%<EFF-GTIj!9<^cq<hBKu-s>#W=mKMH\S`2pA:;^MJbQ.!$>ComO:ZhL$FZ^IlItH=mt8Th>3`)oZdfjk+?*jnY'g<!Rr\-nm/hmV%36$B>f&7+_[-Wsc$JY('0c4Ah90>dT1]!hX^aoKHVikl=*[j;!AIinQ5ZnmLPi"T"QF!tkib[bL"A'eO@BqMCHUhY,m:+D\!sPD<%UDM7>Gb>%33ISDf%)kO11[N*F>D[CdX9@jY#E#c?W8'$q9WHAar(a?[<X4lCO0+CP@]6cs1k=_>_E^].LpKZ8:mSf9feH>"hR1NO%KPNT;+3anqa7T!F.,r=D^190mLrrd+X:hoa7Hss52-7)OZ]BK5l5Lm,ft48&+d<%YV@/&R;XB=]&4l?=M'2k>e?LGDS84t,C]K,[%aoo$HU6222BIp2NKHrrjS%?Ne>,KcJ!o/<4lVpE"dc#?Lj4'pV=JW&.6*#8CISZ^OB.PEMKO0:h1eU9`PZD<b"N^WL$+q]2h(uR<%0-S)VJ84&39?3(>W2HW*YnSB'5s/4&3+Cl(+nL*&_.**a:);&8_NZj>nK3P_8bs\',m4gYX2nNaH:r9HJO8M^,ULZrT-P/U<Z=US%4.jusX@A,LS"0FW3"VZ,/Mq^kWdp%6m*1PhY.*Z*r]!p.7($N=dS.%i.SNfmL$KCOZGI"87R*(#%7rVcjOEB1(m=pX`AFQ@QisfK%;-SD`;ea7Ok[iJ@$"lb'jgLh8@%CB*bN'kUC\:<Q#hGGeRXt/g(++@Lia]*X-k;'ZU9*Go!OQPR(51I:bF*^cj$41l9ZNCeUlh_f%AmY6nNBP_QK3&nOS1(+<f-'@7pUp&;(^F6e/I`Ig<?]>ONJ"$]BX>2@Y+!B6=lVOfReA;3idL/5?nD.o[`Ri)DT"ujfTNUq#VgIA%0O6anl'@;74/`^a!fP!p:QX,Vl*pj"(UZ/aLDo!u<D3sJ,/'rHNH!>.fS=r,Vc1hI2cMG_%kGrihh@29c%a_^0b%jWe6&:P6?9b=%S$XXjo]2/d)5c'NIh4Uh-,!9J:$ZW1U,4:e9$fQ$4>L^X@l/U!aQ9(TU8'&)/%mB&Lf2@KRM2r]!3WnmU327oqW=h=OO[Ok9fAK;%+fh;1f3sar5gJK;'HgPu0YS.e"VHgK"G8oJN'ItNJMQ&DEGN10`+m:XQ[]#KhehU^Ai`g)M9M[0Am%%SE%o_%VU9Pup1Y;m'q?Bq%-JfC\QR\*<A)3+LOMph0806q.UXQ=R3\AZD^pFD7;J8TuG`/AOj](.rf-RNG+`-1Tm^5`03`_[pPbsrYM7!*:<(n#tNhJ;k(m)/"%p(lfma*)Jm8TQL,INcQ(i`o"[]QdG\g*=SITYMb);q*Gp>Y^#aD`>/U3$?i'!,OALL=e4H%&7]=[QZNG[X>uMGU4W94K>80U$/=K%n3Z;S=*I"f;96.cR7%bU\l::E8[<4jI6/:Z4Zhb1k@%,_F&$iHF7#LdbVfp0O_R]>KIl56c4J/SF4s8Rp-S*K#=1a-.WZIu&Uhp/%J>d:jVjXq==/.7aZ]KR")pP]S2ZMuFXugA&;'ml`Dg![N/o">l.mV1+<_e<bIVoKa]-!,4TDb7uZ%*s6cAlb%"mir_R^VH#P+-O<%?#_DTPc@JE176%ci8@OV-()TA"ZQ3ZW>cZ"K#>#;b8cBn!6@=''2.JGpcRj."6)kY?7!W(Uol`f&=5I8cU&/-OtHnF"lU-DW6#W7%)e8004,+KI+a*0g#t.i%L$b:[IQs\G)1Gj((n`k`]b+6HW\CCd9bQi3"H'F=Y%,:hW*Ck%bru='9A3p;!j(MqbJIhO!g7q:E>=:"%@>[L[DPah`^"!#`+Hi)B4:8]FEg=47-s:3*UAuMtGb[NYEai7\b.C^6;8=4j`&CLT$D;PpZ)YM<+RH`lmK+*Qph7'.Tl.g"K]CbA%>H2794:2Dd16atZ7fhO%G2A=`>omFCU_$3['R%et0C6bDSE7>dk"hpXE@3S.]EnR##JHQbJMCK>i_9D^_VgnB_7<u4N'lc&E2YK2%P4Bq"Z'+^=^#[g[mrb$)+=9P5`k%t9#ot58KFVMS^b=t(G9E*Pahc=.Z-I)/pksaR(9jRLToP7`_9JP/SBl4[[>INO2u65k]eT3;%9/B/_QSo.Q`BeWN,@tg4b>WrcP_0ftQJ<mrbAARHR";9i!T5:r.`q#8`Y)p!X6-(N\/#Qp/kE4C\2PBT](r<QOs%T"7S4Dpe5hZ'%PPRQV19"<*lU37*;QnHN3)62cEEu/*"XmSCO1?K6c+&MkPKZ:I%*DD0.VVXl:u9cVEe.&=m:o&&[R1d5P'.i.G48t=-nZ3/@)/PU%JjjI<Hk\ibZpCZ?A5.\!9d83:BX#Kn)d"Jk+_?7VjG7;M#4s.]o&[RM;`RFElr?99kX/QsGi??sSRpN*s*djs=ocRqUe(utomAMa%BiCn0;Q<1n4_lTI4X#2(7b\eE8ijN:4X^U!g?7#oWGl0Dbd]osaGuh_&")Mn.p=GrrttB'KG-/cE<eCEF^Z@'Oq(gk>U*g-)U#I;%2u0C!'<]X=Zl9`V5N0G8Na:7i\igM-kH]c'/Jlok%8]0bUc*%>0/9ts;LmGrnc0A%BW`P*_^\JVcn,\>Z'1]#r%Qf]Z6_K)%U':L%jJQr2&uurB@4c7PVh@!<:%Dk^48//WU5&5FT2Nc4amE>4hE6i`\f;qFHe>o7S.9m'lT0&];NmJ-'58A;63]DtWC*/%aOMV]*NE_J%rh`_K"3a_K#>Ig10!A_QM[RDX392r/81MIWOpS%,Obm^B5&Jb_7oKIO9(taql.DQ;!2uth3N&O&MXIO\UAN@dEfk'7C.FI`V!4+N%N,.].HnbERc/^(MU!@e8-c_Y><*pG/V5X5C<rtheRn1E%F3SO+'"L84+`3SbbHo$&_p42F1`)n,P;&;3h[XcM;-AD4^)]g'KTq=W%8OjHZ[A+b(&]#XA+!<T;VcAU9:*2*.j]j:l@9/tqREb817*bj,lq+8.ig=FA`C[HToBAh(1Djn>pb7J(oEU=4l;B>(\CTBq^`&)e%gmG*W\sA::=QfK2KMjU$Ag"3b(?A@MmZ7](\RDm\*+02-/g]Cacrhe.Q,7NKG%u`kr.1$G_Nj.HfGh"da%9F(ND'>+h'OXp.1-Vl%\FO=/=XPNaaMuQ_UIbfl4/Bq"NH([MhW%;-#niC7/sQ9b)dq#JaX&.(0rh6N+Cc*(..T!MU;GGME"Ilc/MBF6DP+&l\:E2s:8):.%bYdf<7`t3WQ7%4kFG$#0PQK1q%V]Y[c>u"&/^f)L,GPN+cL^b0VAs*je_$^sS.R\k9iT9X*N*uiC4C,D=HP[9i:]SRER?blALO5u%.4s^ST8M6+g6&s'eFX\*3qHeqG#GhFE`HT1noBN.H$P_jQoh*C:NMX?YiV)[U6$"/E*J0RPT"W0;@1t+,'2VO_jD3>Q2)JQW_"r)%JYh;'R>q_-b(2lIJH0/bYGnN>^kQPCRmQD&*BFsi"fqht53<((F-uN>[TI.9quF!!*U_jJW]iI4;a>R3FVEn*<>4[051;,K<\`1j%4Jud0'oBr^NU%+#5ei0A9tD'sPI+WZCO0gOT,ujc+W0#Ba1=^Iq`SbMmbRLTJqY5+n9d9*<;L9`PjrH=cN;tAM6(9_O@\cN\MQZP%Ie-f>Ko=IrTcG)!6c((B1<OpL3pJ_(0fEk_!,&3RA<Q#tVFF5oW<?96V2]5oQ=;AKL^jmiHqlup(h_o*SAu)?S__1i*C-AQ?:f=n%@c4#`ff4"3(/BKU2%pi+?9j].KlZ`!WnAc#SX4VQ>*X&D2]6>LJ[Z+<-Y,).e0Z:mFJ3["jml]9&-FKuf@hCE<HQ7O[NVZpCXLZN%OfNY:-`FLWnHa8E70Kbd])q'j+Z,u(<+C27l<\CM7aU4n?<]c]]^;^A!D,8KXq]$c9Zc!>.p=ru>'ZJ%p?#Xg%O\5d;VA=WH"\G3%#$%C6S@/VGpL(an2ks2/bM&<k;2I/O:1I8sT$Lub;JLpW-rEZBjC[ATKNZTYX$!'O',oeo!t!;L_Vn^_4SU,t4%(oY%V%YR?Ysqg%%?N1_LE<4!A.>b$ZF20PKl`uUHL>SYO$(se\4J3,@\&>Bm3oq/qKo2U=40]d,;Xi"8/YasZXj%BGGH>1h"$#STjt<SlD.:ob!K7_%fiLE_(CenE3^=lt4?Q`.)f_M_8At<2*KiCnW$"+NK&>tV/.@Ga!H^lXJ<FA!HB-J;ZC)sQ:Kn7)OE[H$I;uPa!fKRW@l@+ZG)'!m%q5CqSNl*SI*mtnY*(3U0)2LPr+H_bi6@;P'bKj1I[=%YE,'r%/X\)F'\+t*E*Tie<RD"DOXd+MhIe7rgi(GX,Wg#F/j=-I+*?kNj%%a3q.S[+[%n9G[o`Idql]gK=F(P-cUm7m-C28VkWoe>W":@-F&,2Wk4/"cDV+-<4#KhMNLiu0@gYH^dq3-qi>+l;B\G1BjKeD&]s%bt=Nrq4.u:6K39$.8%#m#gTaY2g_q,#Rei]O'*JCjS;3_SGNZJ`Y^$/8We]r(WLI"/M:j=PO\rUAhNo,I"4+4F0[rE:_lmLKb<?.%DjbVO83+-,g#h*u2jNP>!p7eKFf)aV<O7(5=Hf)!8td%-KIH9N*`>9q%-2O(5.jr(XNFO1M?8M8Sg_Y9'K%JXZqa5]YK98Q]1bo$%jOZ;d0XtRpQ;&1RHl*Ui$TM7&d%MRIK2LekpjhCVj<V0-D]1'(WNf./GYt\kdh*47ohHQs*CmdL6Bn4(\t&m8*-?-*cR$!>\J9.,%MK(:?O@)*&QZ/7*nHIJ3_4=N[idA*HOQ7bMR_a'$fgm3P,ll$se4G\3!`BP^@O+/SMIX<-'(oPehB=GJjgfuJ6,@K3U9(6dq+]kJ%(*9'>'6=Tfqb_Fb:YDG#A>;cB&BiCf_;pdD2"D6^,KaqG\ag<BkHT[J"Ng6aZ_pu`Z;??^,LHqm\Ulh*$TH'<*'h1=faL,ZkNDH=%BJ\9594O8lq2B5qAb!BfI!buD_3BSIK$Vp1`2,PLm)^Q9<I?%EJ)tYSgaK(U!!&-UV$!iZ5*8J9jtGmf1/EOp$d"tYJI(8m&pWtm%/FCn$6C3JeTWd`Bf9(Kk%J$pPJ08Y!@T%]]:*AGQW%DM'/Q+o%RWrjG2j!QA`bnfO(p1Fc`,^C.Nmhe`'iZSGQp%%@?(i?p7Np^p%n_q$aZRX$?MEd4:p$+5@4kMFK1O\jba$Cmn*Z:EX]+XN"+j%mW+S:3'*XHc.<1D\W(!7'L'0NmMia%jKhg<;%U!-=C(tF*-:gaGI%$Y;s@0mdm1EfQmS`>mk=j9@-T?Z=;ckDWprM2%1A#`A.Tig"ck?0)1B(p_B3EW"eZ'I8no"JXU];F[B*(9.EnbHaFY02NgVBT2L'%EO@%Z5J$QcG2l!FIB`4<kjh3bS/G5W__[;bRPAI]_tF_'<:+?p%"n#A=;'e9I&cH,?nI6@<-$2FP.reikIVhgOlqKJO,hm,?\6[U%j>`QJ[ta(eN)p:V,[oiQ37k5thSA.7+KkA)+8,G?8G.[G.oSCLh#TA_i`1lK3+AA5;,@rQ<Rmjkc4M_MJ*1u7<7?#G%spK=\&8E-%(SaTHeZPhN:"r"Q29t;D<pcSrk)Aang7[TJkeQQ*5Ub?1Q&A?sdXDVg:ps#:"#SRG<q^#G?e^5ocP5rVA"!#V`s@,@B;%pY261np%=4VJ.V*(&cC(99HC9:o&0?.n;;sC+"elma(P?+oFl\6+EPTqWsFuj?;a%@,D1mLERMb_DTU;"fl!@DDcd7N;R[jp5:+@ebf:5U9A%LSTkte="gME`jd?8C:!dQ??(hgK/#/iG7;pGsH=NLJEcsaj&RkLaX+2!eJD/>S;_Qj(`ZsKuY&WG3j?Z5"BbFDA)$AQ!,Z?G4I>r%ZR_kQ4*dbFHjYA&G4N]dbYEVdG#Cl5G%t-]G/C;#el8bp66Ek9B\-uHZu^8H8?R.,d-7i(/CdK:$$jA\eP:Zk1?]87*j"qqEWU*.%g0mVM[$3WQ/B:?)@GoLA7\b0=5SV/eJn6rD*$N_/D#E"igohm6TSLZ]jpDfL'%!.=(EJnJgUgYl=hS>&NeCe(&u2c^-`QE7/+lZ)%bjpIN/rD)REmdJ'"U-IlGHT.C(9?4T<U62<NmSl;A;>-;'9SaS'I!+84jP_<"d!i*;DOXK2p3A$VR[gt5C%\4(S4$l;NcW0.<Y21%PT5DZ!_Qa@W^:Hs;hmr<;o8qQCd?sC*<#2alVnn*Cc=WgKoS*iZ)Sb&LSqC*]9V""*S_nAVSc)KOop9b<1N."DNad9P=$?ijHTe)%>YA!-l@jP)GsG_ENH'sV$*ZT:AiljWAOnN=c@<g.Ku^09VE%KDbJm,DFS_btKm)iU*_(FCK%+'N)U'um_H!D40:IRXVKYk,6Desg%4:JW"#R-K,E*ZFq"8u]<pnfN_Pse<rh%V;<&_\Y96%peXS8FF7\*tsuf8A'nSPt<K1=&%=e(^>6&&QW2)G1$KjX[1OM5f,B"+kU7%'_Sgg-dV#`Z"qD5$!,3B\BN(d$/S$GIET8mfNTeG!`,7Y0flkh8OKo0WI[t0KPi%_q6?H8KE9R24=P=Q-D#bA.V?#r<&qA^BiRoF%)N.<sB"E3p1a"YN]2r\63YEEOm:rn8^.^5JTk'Q-Z%[/cd%(N?TmE3$"slp&?fhT5rpsuY$q[En\P3Xf396ks\P=htpt?),jMR&\%8#C]2co-s$8_K;B=/)R4I$'0KR;G+..LDbGP:IshTR8Z11@g$2a/A&TXhZ<;("USTbQ/$'YuF98c%<bCT,>^'cL#Qj8^XC1TJVAP%Ws'4b<so)OL[im+"Tt&Ak8W!a"jr=hWMl-knc3_&ZWo0)e0#VQEkc"7g'**9'10U`,sstYP7.^,B%LZYF:u8]3CfdMJg7id8FtX^%3:(p06*$p!,S==BlN^>J/*pg5&@lOP@A;BV&Y3(uN'cf(HO>u&#.XuOp#ISg!5k`g+N.bj;Ft(C/#`O1`k`.I.gHe9L("VB%Zj<g%K/L/+,l8G3%gaL/&/?3Hn1ckq7<,R:f`\Am%gG!=$9u[MI#1:L>>cV]7N,;[+65fVZJS>n*sC\^9%g?h6m%d,XJlR5gP@@u%b?t_%#]W<_Utn>86+MZ1=0!76Hr:X?``.45f+;EGq0W^.Oa@A]j2.92K$ku:79VDCE\L=,BCgDO$upU9*k\j#G8OSbj/XMC"7+)g6qg]P%37FOgYeVML+XV"jnVEGD4?,n^kZSE%i<NGSKuJcM@Wb^]5kTj`)>RckMKX9s^stP0(pG#).7>2r"t[Nc,SdSdLi7@GXg0A&CZhd:%1^Spir#kd.KVf]D^ccjH<1d:Ngrmg4QTa-<L>ZZFEYEh60r3TCNKhh)/C+@VQ8R0FC%?4X`GQa1QQnY/)crO3AN>.OOJk2]K"!_<%9-(MXC,&=8W>Wh,h1u3M>sG8%.>8IVX,'B1dU73O.^3HYBLm/EJgut`3DoiMBN0#JGYIc5G?/6/oMVkk'jdIeaZ:'RQtO"m_TTVt%.%N!"Nn0]16A_)0B$L%p#':(b"'U9;l7jB\JmRme$a[C=dMgB0<i2H:=5O0Q*OUk0\t>uH;VID<csF`TS%IO3iI*S+8aa7eim\E&%60c`O%H[u=HbIZAfYMt3=`EafP1m'n3U/q^!D,UZ>L:Njg;9U!Xe+h$DI;OEB'N<j'F1c$VP$8?MU,<:Ae4%YeDS.*-3W(TA&Oc1%Nk0819ATYr7ZuR)P3$Q=j05lRKLHOEGnmkP;Q`V!Tq9dc=5ANJ':6=o(apki>a>LD-et"Y-]g'?]9BEb!YRuED3t-_J2o8C3OP-j%WTD-q%["s?KrJseU3,oshP#7CVg<,VBL.-)&uu$L,nF):jntLC$5,hZM!8-oN2N`a[Mc8M(Bn%O=<4.B4CP4(-"CQc&SH"IX-.Gb%SWu0D_/OIe06-"BjL@i(N&Vb0F^5h]CFH$Slusj:`poTjoL$!9WSX-ZnsS+DDcOap:JQ\0>PB$_#Bg3kI^Zg_%B2960p\%$jlRiV%'f4Wc.8oSU]erB@W\u8\+-g&o(s1qGN9/V9`n4=.[jD,+<PlBX0X'/A0=N83'Hqae?A:NRa'$nHlE(8)5u]RY=suWU)aVHLlGZ<p%9,XTd8j\Fp'j_TPC0rljV+t_S]T(7_.d(MY%Z&T)lCAH>;t:ZZY2b`kMG&kmR$hgs($;U5_Sk[PPJm&"X67C7I-O-e9Tm`Sg*&u&%peE*a=M#25W\18/ZaE]=^<GY"<P*/Z&nt4fL?b5-05FB'Ba<c<iH(m-@nZ;glanr0n>N=!(Y*];`gb+c7ATRA<N)r*$a.FgAG'4k%`M&HNS&tW#eWn\gL8)0^'rn?kP!ciLN=nUBXlWB",/UAj'IS!!r[QF55n(V9?Hmi2&f>frRc7lq6GBBXi"UDd4.;4^$n7E[NNa(B%0R:dj-t4c"2It(0%*;(H-EKa_.Ie8"B?jJ@RONP`9#*jNV;J[S9N:!eM^rX<]D"'ref'\?=GLJ5X^@;Q2grr2rS<gU7&ng=_LL()%U4h9doOo;Xg+#[[G^C*!$ljTj@N%k\95.D>P4_Nf.HAko4#;DSEn-f+b9TiiP#[3b:3,$mR!bSs5Y>d%LI@K<K#Wm]eD:l0"YHF>%4+V@?&#GJQUl@0h@)KJC%SDaX%hmm%N0;o2_$<(>`&'e:5&)tE1%(e(E9&n9AFQ*nNC/r`rroL84CEgE#h`GsGE,#.1<tq\N&,t6%MhJIbJ`MN2fb?e<9/Nm6liOF\5EL"b86nB4AK)9F`L#(kT`^g<U2/q45?$)=JAk]b:oG[,J"8)#,.:IN3,>QkFN+)'<E<)6LQG0d%B'KkmkRb"I4,i?Qhbu:nZ&)u)6Vq]C5hQXID339l[P-*E,[r1tfoj;^a>taeMA(+sf(^[6j#@J^Lm7kg*:[-H8J%1Ucos_&Q96p`%$`O0GlE7.<KV4?q+\K[m>oJmM.1HTemN*+Hp=:4LS_jc(dK:aIm\M7AVH@;t<>`Ok=RELIZCp?8'!!OW%<ig&h%>F8[pk+.6-5H1%FL!^ODXuVkGJ"Tin"7R?&![O>'j/EQ1_kdgd0\_q[.@^=XA\ER#fhZ@\c][^?(<@+`1jKO'^6MR<GNk`)JU9eq]q3CM1%GgQ%uX:%57$!o:fCFV0WQ^h(TZ5SMgtTV*=<PHG,a3DZ;q/am5[rJJb@ec=aE/n:hum<>H=qA*E<iKd9D5Q<GDfX]=F7t,3m>,Kjet']`2dk%0!61$]RPum8cCRuVBMQ8Mb):#\<_+#'jhfd[BO]3pu7-aaEP)`Q-cXE"o!7LCL^fK_R8n.dd(OM:]>S$h:gT"o(&n1cZefiHh,e3%STbIfh`pp$4,Zm@^OGe5abQF:kV%k?hsJ)VnE/QPiqkstr!s?bUblFb^3&u;_Z'l6Eu[R~>%AI9_PrivateDataEnd